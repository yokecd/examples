// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package vault

type Values struct {
	// Csi corresponds to the JSON schema field "csi".
	Csi *ValuesCsi `json:"csi,omitempty" yaml:"csi,omitempty" mapstructure:"csi,omitempty"`

	// Global corresponds to the JSON schema field "global".
	Global *ValuesGlobal `json:"global,omitempty" yaml:"global,omitempty" mapstructure:"global,omitempty"`

	// Injector corresponds to the JSON schema field "injector".
	Injector *ValuesInjector `json:"injector,omitempty" yaml:"injector,omitempty" mapstructure:"injector,omitempty"`

	// Server corresponds to the JSON schema field "server".
	Server *ValuesServer `json:"server,omitempty" yaml:"server,omitempty" mapstructure:"server,omitempty"`

	// ServerTelemetry corresponds to the JSON schema field "serverTelemetry".
	ServerTelemetry *ValuesServerTelemetry `json:"serverTelemetry,omitempty" yaml:"serverTelemetry,omitempty" mapstructure:"serverTelemetry,omitempty"`

	// Ui corresponds to the JSON schema field "ui".
	Ui *ValuesUi `json:"ui,omitempty" yaml:"ui,omitempty" mapstructure:"ui,omitempty"`
}

type ValuesCsi struct {
	// Agent corresponds to the JSON schema field "agent".
	Agent *ValuesCsiAgent `json:"agent,omitempty" yaml:"agent,omitempty" mapstructure:"agent,omitempty"`

	// DaemonSet corresponds to the JSON schema field "daemonSet".
	DaemonSet *ValuesCsiDaemonSet `json:"daemonSet,omitempty" yaml:"daemonSet,omitempty" mapstructure:"daemonSet,omitempty"`

	// Debug corresponds to the JSON schema field "debug".
	Debug *bool `json:"debug,omitempty" yaml:"debug,omitempty" mapstructure:"debug,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled interface{} `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// ExtraArgs corresponds to the JSON schema field "extraArgs".
	ExtraArgs []interface{} `json:"extraArgs,omitempty" yaml:"extraArgs,omitempty" mapstructure:"extraArgs,omitempty"`

	// HmacSecretName corresponds to the JSON schema field "hmacSecretName".
	HmacSecretName *string `json:"hmacSecretName,omitempty" yaml:"hmacSecretName,omitempty" mapstructure:"hmacSecretName,omitempty"`

	// HostNetwork corresponds to the JSON schema field "hostNetwork".
	HostNetwork *bool `json:"hostNetwork,omitempty" yaml:"hostNetwork,omitempty" mapstructure:"hostNetwork,omitempty"`

	// Image corresponds to the JSON schema field "image".
	Image *ValuesCsiImage `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// LivenessProbe corresponds to the JSON schema field "livenessProbe".
	LivenessProbe *ValuesCsiLivenessProbe `json:"livenessProbe,omitempty" yaml:"livenessProbe,omitempty" mapstructure:"livenessProbe,omitempty"`

	// LogLevel corresponds to the JSON schema field "logLevel".
	LogLevel *string `json:"logLevel,omitempty" yaml:"logLevel,omitempty" mapstructure:"logLevel,omitempty"`

	// Pod corresponds to the JSON schema field "pod".
	Pod *ValuesCsiPod `json:"pod,omitempty" yaml:"pod,omitempty" mapstructure:"pod,omitempty"`

	// PriorityClassName corresponds to the JSON schema field "priorityClassName".
	PriorityClassName *string `json:"priorityClassName,omitempty" yaml:"priorityClassName,omitempty" mapstructure:"priorityClassName,omitempty"`

	// ReadinessProbe corresponds to the JSON schema field "readinessProbe".
	ReadinessProbe *ValuesCsiReadinessProbe `json:"readinessProbe,omitempty" yaml:"readinessProbe,omitempty" mapstructure:"readinessProbe,omitempty"`

	// Resources corresponds to the JSON schema field "resources".
	Resources ValuesCsiResources `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`

	// ServiceAccount corresponds to the JSON schema field "serviceAccount".
	ServiceAccount *ValuesCsiServiceAccount `json:"serviceAccount,omitempty" yaml:"serviceAccount,omitempty" mapstructure:"serviceAccount,omitempty"`

	// VolumeMounts corresponds to the JSON schema field "volumeMounts".
	VolumeMounts []interface{} `json:"volumeMounts,omitempty" yaml:"volumeMounts,omitempty" mapstructure:"volumeMounts,omitempty"`

	// Volumes corresponds to the JSON schema field "volumes".
	Volumes []interface{} `json:"volumes,omitempty" yaml:"volumes,omitempty" mapstructure:"volumes,omitempty"`
}

type ValuesCsiAgent struct {
	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// ExtraArgs corresponds to the JSON schema field "extraArgs".
	ExtraArgs []interface{} `json:"extraArgs,omitempty" yaml:"extraArgs,omitempty" mapstructure:"extraArgs,omitempty"`

	// Image corresponds to the JSON schema field "image".
	Image *ValuesCsiAgentImage `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// LogFormat corresponds to the JSON schema field "logFormat".
	LogFormat *string `json:"logFormat,omitempty" yaml:"logFormat,omitempty" mapstructure:"logFormat,omitempty"`

	// LogLevel corresponds to the JSON schema field "logLevel".
	LogLevel *string `json:"logLevel,omitempty" yaml:"logLevel,omitempty" mapstructure:"logLevel,omitempty"`

	// Resources corresponds to the JSON schema field "resources".
	Resources ValuesCsiAgentResources `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`
}

type ValuesCsiAgentImage struct {
	// PullPolicy corresponds to the JSON schema field "pullPolicy".
	PullPolicy *string `json:"pullPolicy,omitempty" yaml:"pullPolicy,omitempty" mapstructure:"pullPolicy,omitempty"`

	// Repository corresponds to the JSON schema field "repository".
	Repository *string `json:"repository,omitempty" yaml:"repository,omitempty" mapstructure:"repository,omitempty"`

	// Tag corresponds to the JSON schema field "tag".
	Tag *string `json:"tag,omitempty" yaml:"tag,omitempty" mapstructure:"tag,omitempty"`
}

type ValuesCsiAgentResources map[string]interface{}

type ValuesCsiDaemonSet struct {
	// Annotations corresponds to the JSON schema field "annotations".
	Annotations interface{} `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// ExtraLabels corresponds to the JSON schema field "extraLabels".
	ExtraLabels ValuesCsiDaemonSetExtraLabels `json:"extraLabels,omitempty" yaml:"extraLabels,omitempty" mapstructure:"extraLabels,omitempty"`

	// KubeletRootDir corresponds to the JSON schema field "kubeletRootDir".
	KubeletRootDir *string `json:"kubeletRootDir,omitempty" yaml:"kubeletRootDir,omitempty" mapstructure:"kubeletRootDir,omitempty"`

	// ProvidersDir corresponds to the JSON schema field "providersDir".
	ProvidersDir *string `json:"providersDir,omitempty" yaml:"providersDir,omitempty" mapstructure:"providersDir,omitempty"`

	// SecurityContext corresponds to the JSON schema field "securityContext".
	SecurityContext *ValuesCsiDaemonSetSecurityContext `json:"securityContext,omitempty" yaml:"securityContext,omitempty" mapstructure:"securityContext,omitempty"`

	// UpdateStrategy corresponds to the JSON schema field "updateStrategy".
	UpdateStrategy *ValuesCsiDaemonSetUpdateStrategy `json:"updateStrategy,omitempty" yaml:"updateStrategy,omitempty" mapstructure:"updateStrategy,omitempty"`
}

type ValuesCsiDaemonSetExtraLabels map[string]interface{}

type ValuesCsiDaemonSetSecurityContext struct {
	// Container corresponds to the JSON schema field "container".
	Container interface{} `json:"container,omitempty" yaml:"container,omitempty" mapstructure:"container,omitempty"`

	// Pod corresponds to the JSON schema field "pod".
	Pod interface{} `json:"pod,omitempty" yaml:"pod,omitempty" mapstructure:"pod,omitempty"`
}

type ValuesCsiDaemonSetUpdateStrategy struct {
	// MaxUnavailable corresponds to the JSON schema field "maxUnavailable".
	MaxUnavailable *string `json:"maxUnavailable,omitempty" yaml:"maxUnavailable,omitempty" mapstructure:"maxUnavailable,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type ValuesCsiImage struct {
	// PullPolicy corresponds to the JSON schema field "pullPolicy".
	PullPolicy *string `json:"pullPolicy,omitempty" yaml:"pullPolicy,omitempty" mapstructure:"pullPolicy,omitempty"`

	// Repository corresponds to the JSON schema field "repository".
	Repository *string `json:"repository,omitempty" yaml:"repository,omitempty" mapstructure:"repository,omitempty"`

	// Tag corresponds to the JSON schema field "tag".
	Tag *string `json:"tag,omitempty" yaml:"tag,omitempty" mapstructure:"tag,omitempty"`
}

type ValuesCsiLivenessProbe struct {
	// FailureThreshold corresponds to the JSON schema field "failureThreshold".
	FailureThreshold *int `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// InitialDelaySeconds corresponds to the JSON schema field "initialDelaySeconds".
	InitialDelaySeconds *int `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// PeriodSeconds corresponds to the JSON schema field "periodSeconds".
	PeriodSeconds *int `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// SuccessThreshold corresponds to the JSON schema field "successThreshold".
	SuccessThreshold *int `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// TimeoutSeconds corresponds to the JSON schema field "timeoutSeconds".
	TimeoutSeconds *int `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesCsiPod struct {
	// Affinity corresponds to the JSON schema field "affinity".
	Affinity interface{} `json:"affinity,omitempty" yaml:"affinity,omitempty" mapstructure:"affinity,omitempty"`

	// Annotations corresponds to the JSON schema field "annotations".
	Annotations interface{} `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// ExtraLabels corresponds to the JSON schema field "extraLabels".
	ExtraLabels ValuesCsiPodExtraLabels `json:"extraLabels,omitempty" yaml:"extraLabels,omitempty" mapstructure:"extraLabels,omitempty"`

	// NodeSelector corresponds to the JSON schema field "nodeSelector".
	NodeSelector interface{} `json:"nodeSelector,omitempty" yaml:"nodeSelector,omitempty" mapstructure:"nodeSelector,omitempty"`

	// Tolerations corresponds to the JSON schema field "tolerations".
	Tolerations interface{} `json:"tolerations,omitempty" yaml:"tolerations,omitempty" mapstructure:"tolerations,omitempty"`
}

type ValuesCsiPodExtraLabels map[string]interface{}

type ValuesCsiReadinessProbe struct {
	// FailureThreshold corresponds to the JSON schema field "failureThreshold".
	FailureThreshold *int `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// InitialDelaySeconds corresponds to the JSON schema field "initialDelaySeconds".
	InitialDelaySeconds *int `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// PeriodSeconds corresponds to the JSON schema field "periodSeconds".
	PeriodSeconds *int `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// SuccessThreshold corresponds to the JSON schema field "successThreshold".
	SuccessThreshold *int `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// TimeoutSeconds corresponds to the JSON schema field "timeoutSeconds".
	TimeoutSeconds *int `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesCsiResources map[string]interface{}

type ValuesCsiServiceAccount struct {
	// Annotations corresponds to the JSON schema field "annotations".
	Annotations interface{} `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// ExtraLabels corresponds to the JSON schema field "extraLabels".
	ExtraLabels ValuesCsiServiceAccountExtraLabels `json:"extraLabels,omitempty" yaml:"extraLabels,omitempty" mapstructure:"extraLabels,omitempty"`
}

type ValuesCsiServiceAccountExtraLabels map[string]interface{}

type ValuesGlobal struct {
	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// ExternalVaultAddr corresponds to the JSON schema field "externalVaultAddr".
	ExternalVaultAddr *string `json:"externalVaultAddr,omitempty" yaml:"externalVaultAddr,omitempty" mapstructure:"externalVaultAddr,omitempty"`

	// ImagePullSecrets corresponds to the JSON schema field "imagePullSecrets".
	ImagePullSecrets []interface{} `json:"imagePullSecrets,omitempty" yaml:"imagePullSecrets,omitempty" mapstructure:"imagePullSecrets,omitempty"`

	// Namespace corresponds to the JSON schema field "namespace".
	Namespace *string `json:"namespace,omitempty" yaml:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// Openshift corresponds to the JSON schema field "openshift".
	Openshift *bool `json:"openshift,omitempty" yaml:"openshift,omitempty" mapstructure:"openshift,omitempty"`

	// Psp corresponds to the JSON schema field "psp".
	Psp *ValuesGlobalPsp `json:"psp,omitempty" yaml:"psp,omitempty" mapstructure:"psp,omitempty"`

	// ServerTelemetry corresponds to the JSON schema field "serverTelemetry".
	ServerTelemetry *ValuesGlobalServerTelemetry `json:"serverTelemetry,omitempty" yaml:"serverTelemetry,omitempty" mapstructure:"serverTelemetry,omitempty"`

	// TlsDisable corresponds to the JSON schema field "tlsDisable".
	TlsDisable *bool `json:"tlsDisable,omitempty" yaml:"tlsDisable,omitempty" mapstructure:"tlsDisable,omitempty"`
}

type ValuesGlobalPsp struct {
	// Annotations corresponds to the JSON schema field "annotations".
	Annotations interface{} `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Enable corresponds to the JSON schema field "enable".
	Enable *bool `json:"enable,omitempty" yaml:"enable,omitempty" mapstructure:"enable,omitempty"`
}

type ValuesGlobalServerTelemetry struct {
	// PrometheusOperator corresponds to the JSON schema field "prometheusOperator".
	PrometheusOperator *bool `json:"prometheusOperator,omitempty" yaml:"prometheusOperator,omitempty" mapstructure:"prometheusOperator,omitempty"`
}

type ValuesInjector struct {
	// Affinity corresponds to the JSON schema field "affinity".
	Affinity interface{} `json:"affinity,omitempty" yaml:"affinity,omitempty" mapstructure:"affinity,omitempty"`

	// AgentDefaults corresponds to the JSON schema field "agentDefaults".
	AgentDefaults *ValuesInjectorAgentDefaults `json:"agentDefaults,omitempty" yaml:"agentDefaults,omitempty" mapstructure:"agentDefaults,omitempty"`

	// AgentImage corresponds to the JSON schema field "agentImage".
	AgentImage *ValuesInjectorAgentImage `json:"agentImage,omitempty" yaml:"agentImage,omitempty" mapstructure:"agentImage,omitempty"`

	// Annotations corresponds to the JSON schema field "annotations".
	Annotations interface{} `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// AuthPath corresponds to the JSON schema field "authPath".
	AuthPath *string `json:"authPath,omitempty" yaml:"authPath,omitempty" mapstructure:"authPath,omitempty"`

	// Certs corresponds to the JSON schema field "certs".
	Certs *ValuesInjectorCerts `json:"certs,omitempty" yaml:"certs,omitempty" mapstructure:"certs,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled interface{} `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// ExternalVaultAddr corresponds to the JSON schema field "externalVaultAddr".
	ExternalVaultAddr *string `json:"externalVaultAddr,omitempty" yaml:"externalVaultAddr,omitempty" mapstructure:"externalVaultAddr,omitempty"`

	// ExtraEnvironmentVars corresponds to the JSON schema field
	// "extraEnvironmentVars".
	ExtraEnvironmentVars ValuesInjectorExtraEnvironmentVars `json:"extraEnvironmentVars,omitempty" yaml:"extraEnvironmentVars,omitempty" mapstructure:"extraEnvironmentVars,omitempty"`

	// ExtraLabels corresponds to the JSON schema field "extraLabels".
	ExtraLabels ValuesInjectorExtraLabels `json:"extraLabels,omitempty" yaml:"extraLabels,omitempty" mapstructure:"extraLabels,omitempty"`

	// FailurePolicy corresponds to the JSON schema field "failurePolicy".
	FailurePolicy *string `json:"failurePolicy,omitempty" yaml:"failurePolicy,omitempty" mapstructure:"failurePolicy,omitempty"`

	// HostNetwork corresponds to the JSON schema field "hostNetwork".
	HostNetwork *bool `json:"hostNetwork,omitempty" yaml:"hostNetwork,omitempty" mapstructure:"hostNetwork,omitempty"`

	// Image corresponds to the JSON schema field "image".
	Image *ValuesInjectorImage `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// LeaderElector corresponds to the JSON schema field "leaderElector".
	LeaderElector *ValuesInjectorLeaderElector `json:"leaderElector,omitempty" yaml:"leaderElector,omitempty" mapstructure:"leaderElector,omitempty"`

	// LivenessProbe corresponds to the JSON schema field "livenessProbe".
	LivenessProbe *ValuesInjectorLivenessProbe `json:"livenessProbe,omitempty" yaml:"livenessProbe,omitempty" mapstructure:"livenessProbe,omitempty"`

	// LogFormat corresponds to the JSON schema field "logFormat".
	LogFormat *string `json:"logFormat,omitempty" yaml:"logFormat,omitempty" mapstructure:"logFormat,omitempty"`

	// LogLevel corresponds to the JSON schema field "logLevel".
	LogLevel *string `json:"logLevel,omitempty" yaml:"logLevel,omitempty" mapstructure:"logLevel,omitempty"`

	// Metrics corresponds to the JSON schema field "metrics".
	Metrics *ValuesInjectorMetrics `json:"metrics,omitempty" yaml:"metrics,omitempty" mapstructure:"metrics,omitempty"`

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	NamespaceSelector ValuesInjectorNamespaceSelector `json:"namespaceSelector,omitempty" yaml:"namespaceSelector,omitempty" mapstructure:"namespaceSelector,omitempty"`

	// NodeSelector corresponds to the JSON schema field "nodeSelector".
	NodeSelector interface{} `json:"nodeSelector,omitempty" yaml:"nodeSelector,omitempty" mapstructure:"nodeSelector,omitempty"`

	// ObjectSelector corresponds to the JSON schema field "objectSelector".
	ObjectSelector interface{} `json:"objectSelector,omitempty" yaml:"objectSelector,omitempty" mapstructure:"objectSelector,omitempty"`

	// PodDisruptionBudget corresponds to the JSON schema field "podDisruptionBudget".
	PodDisruptionBudget ValuesInjectorPodDisruptionBudget `json:"podDisruptionBudget,omitempty" yaml:"podDisruptionBudget,omitempty" mapstructure:"podDisruptionBudget,omitempty"`

	// Port corresponds to the JSON schema field "port".
	Port *int `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`

	// PriorityClassName corresponds to the JSON schema field "priorityClassName".
	PriorityClassName *string `json:"priorityClassName,omitempty" yaml:"priorityClassName,omitempty" mapstructure:"priorityClassName,omitempty"`

	// ReadinessProbe corresponds to the JSON schema field "readinessProbe".
	ReadinessProbe *ValuesInjectorReadinessProbe `json:"readinessProbe,omitempty" yaml:"readinessProbe,omitempty" mapstructure:"readinessProbe,omitempty"`

	// Replicas corresponds to the JSON schema field "replicas".
	Replicas *int `json:"replicas,omitempty" yaml:"replicas,omitempty" mapstructure:"replicas,omitempty"`

	// Resources corresponds to the JSON schema field "resources".
	Resources ValuesInjectorResources `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`

	// RevokeOnShutdown corresponds to the JSON schema field "revokeOnShutdown".
	RevokeOnShutdown *bool `json:"revokeOnShutdown,omitempty" yaml:"revokeOnShutdown,omitempty" mapstructure:"revokeOnShutdown,omitempty"`

	// SecurityContext corresponds to the JSON schema field "securityContext".
	SecurityContext *ValuesInjectorSecurityContext `json:"securityContext,omitempty" yaml:"securityContext,omitempty" mapstructure:"securityContext,omitempty"`

	// Service corresponds to the JSON schema field "service".
	Service *ValuesInjectorService `json:"service,omitempty" yaml:"service,omitempty" mapstructure:"service,omitempty"`

	// ServiceAccount corresponds to the JSON schema field "serviceAccount".
	ServiceAccount *ValuesInjectorServiceAccount `json:"serviceAccount,omitempty" yaml:"serviceAccount,omitempty" mapstructure:"serviceAccount,omitempty"`

	// StartupProbe corresponds to the JSON schema field "startupProbe".
	StartupProbe *ValuesInjectorStartupProbe `json:"startupProbe,omitempty" yaml:"startupProbe,omitempty" mapstructure:"startupProbe,omitempty"`

	// Strategy corresponds to the JSON schema field "strategy".
	Strategy interface{} `json:"strategy,omitempty" yaml:"strategy,omitempty" mapstructure:"strategy,omitempty"`

	// Tolerations corresponds to the JSON schema field "tolerations".
	Tolerations interface{} `json:"tolerations,omitempty" yaml:"tolerations,omitempty" mapstructure:"tolerations,omitempty"`

	// TopologySpreadConstraints corresponds to the JSON schema field
	// "topologySpreadConstraints".
	TopologySpreadConstraints interface{} `json:"topologySpreadConstraints,omitempty" yaml:"topologySpreadConstraints,omitempty" mapstructure:"topologySpreadConstraints,omitempty"`

	// Webhook corresponds to the JSON schema field "webhook".
	Webhook *ValuesInjectorWebhook `json:"webhook,omitempty" yaml:"webhook,omitempty" mapstructure:"webhook,omitempty"`

	// WebhookAnnotations corresponds to the JSON schema field "webhookAnnotations".
	WebhookAnnotations interface{} `json:"webhookAnnotations,omitempty" yaml:"webhookAnnotations,omitempty" mapstructure:"webhookAnnotations,omitempty"`
}

type ValuesInjectorAgentDefaults struct {
	// CpuLimit corresponds to the JSON schema field "cpuLimit".
	CpuLimit *string `json:"cpuLimit,omitempty" yaml:"cpuLimit,omitempty" mapstructure:"cpuLimit,omitempty"`

	// CpuRequest corresponds to the JSON schema field "cpuRequest".
	CpuRequest *string `json:"cpuRequest,omitempty" yaml:"cpuRequest,omitempty" mapstructure:"cpuRequest,omitempty"`

	// EphemeralLimit corresponds to the JSON schema field "ephemeralLimit".
	EphemeralLimit *string `json:"ephemeralLimit,omitempty" yaml:"ephemeralLimit,omitempty" mapstructure:"ephemeralLimit,omitempty"`

	// EphemeralRequest corresponds to the JSON schema field "ephemeralRequest".
	EphemeralRequest *string `json:"ephemeralRequest,omitempty" yaml:"ephemeralRequest,omitempty" mapstructure:"ephemeralRequest,omitempty"`

	// MemLimit corresponds to the JSON schema field "memLimit".
	MemLimit *string `json:"memLimit,omitempty" yaml:"memLimit,omitempty" mapstructure:"memLimit,omitempty"`

	// MemRequest corresponds to the JSON schema field "memRequest".
	MemRequest *string `json:"memRequest,omitempty" yaml:"memRequest,omitempty" mapstructure:"memRequest,omitempty"`

	// Template corresponds to the JSON schema field "template".
	Template *string `json:"template,omitempty" yaml:"template,omitempty" mapstructure:"template,omitempty"`

	// TemplateConfig corresponds to the JSON schema field "templateConfig".
	TemplateConfig *ValuesInjectorAgentDefaultsTemplateConfig `json:"templateConfig,omitempty" yaml:"templateConfig,omitempty" mapstructure:"templateConfig,omitempty"`
}

type ValuesInjectorAgentDefaultsTemplateConfig struct {
	// ExitOnRetryFailure corresponds to the JSON schema field "exitOnRetryFailure".
	ExitOnRetryFailure *bool `json:"exitOnRetryFailure,omitempty" yaml:"exitOnRetryFailure,omitempty" mapstructure:"exitOnRetryFailure,omitempty"`

	// StaticSecretRenderInterval corresponds to the JSON schema field
	// "staticSecretRenderInterval".
	StaticSecretRenderInterval *string `json:"staticSecretRenderInterval,omitempty" yaml:"staticSecretRenderInterval,omitempty" mapstructure:"staticSecretRenderInterval,omitempty"`
}

type ValuesInjectorAgentImage struct {
	// Repository corresponds to the JSON schema field "repository".
	Repository *string `json:"repository,omitempty" yaml:"repository,omitempty" mapstructure:"repository,omitempty"`

	// Tag corresponds to the JSON schema field "tag".
	Tag *string `json:"tag,omitempty" yaml:"tag,omitempty" mapstructure:"tag,omitempty"`
}

type ValuesInjectorCerts struct {
	// CaBundle corresponds to the JSON schema field "caBundle".
	CaBundle *string `json:"caBundle,omitempty" yaml:"caBundle,omitempty" mapstructure:"caBundle,omitempty"`

	// CertName corresponds to the JSON schema field "certName".
	CertName *string `json:"certName,omitempty" yaml:"certName,omitempty" mapstructure:"certName,omitempty"`

	// KeyName corresponds to the JSON schema field "keyName".
	KeyName *string `json:"keyName,omitempty" yaml:"keyName,omitempty" mapstructure:"keyName,omitempty"`

	// SecretName corresponds to the JSON schema field "secretName".
	SecretName *string `json:"secretName,omitempty" yaml:"secretName,omitempty" mapstructure:"secretName,omitempty"`
}

type ValuesInjectorExtraEnvironmentVars map[string]interface{}

type ValuesInjectorExtraLabels map[string]interface{}

type ValuesInjectorImage struct {
	// PullPolicy corresponds to the JSON schema field "pullPolicy".
	PullPolicy *string `json:"pullPolicy,omitempty" yaml:"pullPolicy,omitempty" mapstructure:"pullPolicy,omitempty"`

	// Repository corresponds to the JSON schema field "repository".
	Repository *string `json:"repository,omitempty" yaml:"repository,omitempty" mapstructure:"repository,omitempty"`

	// Tag corresponds to the JSON schema field "tag".
	Tag *string `json:"tag,omitempty" yaml:"tag,omitempty" mapstructure:"tag,omitempty"`
}

type ValuesInjectorLeaderElector struct {
	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

type ValuesInjectorLivenessProbe struct {
	// FailureThreshold corresponds to the JSON schema field "failureThreshold".
	FailureThreshold *int `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// InitialDelaySeconds corresponds to the JSON schema field "initialDelaySeconds".
	InitialDelaySeconds *int `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// PeriodSeconds corresponds to the JSON schema field "periodSeconds".
	PeriodSeconds *int `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// SuccessThreshold corresponds to the JSON schema field "successThreshold".
	SuccessThreshold *int `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// TimeoutSeconds corresponds to the JSON schema field "timeoutSeconds".
	TimeoutSeconds *int `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesInjectorMetrics struct {
	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

type ValuesInjectorNamespaceSelector map[string]interface{}

type ValuesInjectorPodDisruptionBudget map[string]interface{}

type ValuesInjectorReadinessProbe struct {
	// FailureThreshold corresponds to the JSON schema field "failureThreshold".
	FailureThreshold *int `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// InitialDelaySeconds corresponds to the JSON schema field "initialDelaySeconds".
	InitialDelaySeconds *int `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// PeriodSeconds corresponds to the JSON schema field "periodSeconds".
	PeriodSeconds *int `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// SuccessThreshold corresponds to the JSON schema field "successThreshold".
	SuccessThreshold *int `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// TimeoutSeconds corresponds to the JSON schema field "timeoutSeconds".
	TimeoutSeconds *int `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesInjectorResources map[string]interface{}

type ValuesInjectorSecurityContext struct {
	// Container corresponds to the JSON schema field "container".
	Container interface{} `json:"container,omitempty" yaml:"container,omitempty" mapstructure:"container,omitempty"`

	// Pod corresponds to the JSON schema field "pod".
	Pod interface{} `json:"pod,omitempty" yaml:"pod,omitempty" mapstructure:"pod,omitempty"`
}

type ValuesInjectorService struct {
	// Annotations corresponds to the JSON schema field "annotations".
	Annotations interface{} `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`
}

type ValuesInjectorServiceAccount struct {
	// Annotations corresponds to the JSON schema field "annotations".
	Annotations interface{} `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`
}

type ValuesInjectorStartupProbe struct {
	// FailureThreshold corresponds to the JSON schema field "failureThreshold".
	FailureThreshold *int `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// InitialDelaySeconds corresponds to the JSON schema field "initialDelaySeconds".
	InitialDelaySeconds *int `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// PeriodSeconds corresponds to the JSON schema field "periodSeconds".
	PeriodSeconds *int `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// SuccessThreshold corresponds to the JSON schema field "successThreshold".
	SuccessThreshold *int `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// TimeoutSeconds corresponds to the JSON schema field "timeoutSeconds".
	TimeoutSeconds *int `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesInjectorWebhook struct {
	// Annotations corresponds to the JSON schema field "annotations".
	Annotations interface{} `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// FailurePolicy corresponds to the JSON schema field "failurePolicy".
	FailurePolicy *string `json:"failurePolicy,omitempty" yaml:"failurePolicy,omitempty" mapstructure:"failurePolicy,omitempty"`

	// MatchPolicy corresponds to the JSON schema field "matchPolicy".
	MatchPolicy *string `json:"matchPolicy,omitempty" yaml:"matchPolicy,omitempty" mapstructure:"matchPolicy,omitempty"`

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	NamespaceSelector ValuesInjectorWebhookNamespaceSelector `json:"namespaceSelector,omitempty" yaml:"namespaceSelector,omitempty" mapstructure:"namespaceSelector,omitempty"`

	// ObjectSelector corresponds to the JSON schema field "objectSelector".
	ObjectSelector interface{} `json:"objectSelector,omitempty" yaml:"objectSelector,omitempty" mapstructure:"objectSelector,omitempty"`

	// TimeoutSeconds corresponds to the JSON schema field "timeoutSeconds".
	TimeoutSeconds *int `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesInjectorWebhookNamespaceSelector map[string]interface{}

type ValuesServer struct {
	// Affinity corresponds to the JSON schema field "affinity".
	Affinity interface{} `json:"affinity,omitempty" yaml:"affinity,omitempty" mapstructure:"affinity,omitempty"`

	// Annotations corresponds to the JSON schema field "annotations".
	Annotations interface{} `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// AuditStorage corresponds to the JSON schema field "auditStorage".
	AuditStorage *ValuesServerAuditStorage `json:"auditStorage,omitempty" yaml:"auditStorage,omitempty" mapstructure:"auditStorage,omitempty"`

	// AuthDelegator corresponds to the JSON schema field "authDelegator".
	AuthDelegator *ValuesServerAuthDelegator `json:"authDelegator,omitempty" yaml:"authDelegator,omitempty" mapstructure:"authDelegator,omitempty"`

	// DataStorage corresponds to the JSON schema field "dataStorage".
	DataStorage *ValuesServerDataStorage `json:"dataStorage,omitempty" yaml:"dataStorage,omitempty" mapstructure:"dataStorage,omitempty"`

	// Dev corresponds to the JSON schema field "dev".
	Dev *ValuesServerDev `json:"dev,omitempty" yaml:"dev,omitempty" mapstructure:"dev,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled interface{} `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// EnterpriseLicense corresponds to the JSON schema field "enterpriseLicense".
	EnterpriseLicense *ValuesServerEnterpriseLicense `json:"enterpriseLicense,omitempty" yaml:"enterpriseLicense,omitempty" mapstructure:"enterpriseLicense,omitempty"`

	// ExtraArgs corresponds to the JSON schema field "extraArgs".
	ExtraArgs *string `json:"extraArgs,omitempty" yaml:"extraArgs,omitempty" mapstructure:"extraArgs,omitempty"`

	// ExtraContainers corresponds to the JSON schema field "extraContainers".
	ExtraContainers []interface{} `json:"extraContainers,omitempty" yaml:"extraContainers,omitempty" mapstructure:"extraContainers,omitempty"`

	// ExtraEnvironmentVars corresponds to the JSON schema field
	// "extraEnvironmentVars".
	ExtraEnvironmentVars ValuesServerExtraEnvironmentVars `json:"extraEnvironmentVars,omitempty" yaml:"extraEnvironmentVars,omitempty" mapstructure:"extraEnvironmentVars,omitempty"`

	// ExtraInitContainers corresponds to the JSON schema field "extraInitContainers".
	ExtraInitContainers []interface{} `json:"extraInitContainers,omitempty" yaml:"extraInitContainers,omitempty" mapstructure:"extraInitContainers,omitempty"`

	// ExtraLabels corresponds to the JSON schema field "extraLabels".
	ExtraLabels ValuesServerExtraLabels `json:"extraLabels,omitempty" yaml:"extraLabels,omitempty" mapstructure:"extraLabels,omitempty"`

	// ExtraPorts corresponds to the JSON schema field "extraPorts".
	ExtraPorts []interface{} `json:"extraPorts,omitempty" yaml:"extraPorts,omitempty" mapstructure:"extraPorts,omitempty"`

	// ExtraSecretEnvironmentVars corresponds to the JSON schema field
	// "extraSecretEnvironmentVars".
	ExtraSecretEnvironmentVars []interface{} `json:"extraSecretEnvironmentVars,omitempty" yaml:"extraSecretEnvironmentVars,omitempty" mapstructure:"extraSecretEnvironmentVars,omitempty"`

	// ExtraVolumes corresponds to the JSON schema field "extraVolumes".
	ExtraVolumes []interface{} `json:"extraVolumes,omitempty" yaml:"extraVolumes,omitempty" mapstructure:"extraVolumes,omitempty"`

	// Ha corresponds to the JSON schema field "ha".
	Ha *ValuesServerHa `json:"ha,omitempty" yaml:"ha,omitempty" mapstructure:"ha,omitempty"`

	// HostAliases corresponds to the JSON schema field "hostAliases".
	HostAliases []interface{} `json:"hostAliases,omitempty" yaml:"hostAliases,omitempty" mapstructure:"hostAliases,omitempty"`

	// HostNetwork corresponds to the JSON schema field "hostNetwork".
	HostNetwork *bool `json:"hostNetwork,omitempty" yaml:"hostNetwork,omitempty" mapstructure:"hostNetwork,omitempty"`

	// Image corresponds to the JSON schema field "image".
	Image *ValuesServerImage `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// IncludeConfigAnnotation corresponds to the JSON schema field
	// "includeConfigAnnotation".
	IncludeConfigAnnotation *bool `json:"includeConfigAnnotation,omitempty" yaml:"includeConfigAnnotation,omitempty" mapstructure:"includeConfigAnnotation,omitempty"`

	// Ingress corresponds to the JSON schema field "ingress".
	Ingress *ValuesServerIngress `json:"ingress,omitempty" yaml:"ingress,omitempty" mapstructure:"ingress,omitempty"`

	// LivenessProbe corresponds to the JSON schema field "livenessProbe".
	LivenessProbe *ValuesServerLivenessProbe `json:"livenessProbe,omitempty" yaml:"livenessProbe,omitempty" mapstructure:"livenessProbe,omitempty"`

	// LogFormat corresponds to the JSON schema field "logFormat".
	LogFormat *string `json:"logFormat,omitempty" yaml:"logFormat,omitempty" mapstructure:"logFormat,omitempty"`

	// LogLevel corresponds to the JSON schema field "logLevel".
	LogLevel *string `json:"logLevel,omitempty" yaml:"logLevel,omitempty" mapstructure:"logLevel,omitempty"`

	// NetworkPolicy corresponds to the JSON schema field "networkPolicy".
	NetworkPolicy *ValuesServerNetworkPolicy `json:"networkPolicy,omitempty" yaml:"networkPolicy,omitempty" mapstructure:"networkPolicy,omitempty"`

	// NodeSelector corresponds to the JSON schema field "nodeSelector".
	NodeSelector interface{} `json:"nodeSelector,omitempty" yaml:"nodeSelector,omitempty" mapstructure:"nodeSelector,omitempty"`

	// PersistentVolumeClaimRetentionPolicy corresponds to the JSON schema field
	// "persistentVolumeClaimRetentionPolicy".
	PersistentVolumeClaimRetentionPolicy *ValuesServerPersistentVolumeClaimRetentionPolicy `json:"persistentVolumeClaimRetentionPolicy,omitempty" yaml:"persistentVolumeClaimRetentionPolicy,omitempty" mapstructure:"persistentVolumeClaimRetentionPolicy,omitempty"`

	// PostStart corresponds to the JSON schema field "postStart".
	PostStart []interface{} `json:"postStart,omitempty" yaml:"postStart,omitempty" mapstructure:"postStart,omitempty"`

	// PreStopSleepSeconds corresponds to the JSON schema field "preStopSleepSeconds".
	PreStopSleepSeconds *int `json:"preStopSleepSeconds,omitempty" yaml:"preStopSleepSeconds,omitempty" mapstructure:"preStopSleepSeconds,omitempty"`

	// PriorityClassName corresponds to the JSON schema field "priorityClassName".
	PriorityClassName *string `json:"priorityClassName,omitempty" yaml:"priorityClassName,omitempty" mapstructure:"priorityClassName,omitempty"`

	// ReadinessProbe corresponds to the JSON schema field "readinessProbe".
	ReadinessProbe *ValuesServerReadinessProbe `json:"readinessProbe,omitempty" yaml:"readinessProbe,omitempty" mapstructure:"readinessProbe,omitempty"`

	// Resources corresponds to the JSON schema field "resources".
	Resources ValuesServerResources `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`

	// Route corresponds to the JSON schema field "route".
	Route *ValuesServerRoute `json:"route,omitempty" yaml:"route,omitempty" mapstructure:"route,omitempty"`

	// Service corresponds to the JSON schema field "service".
	Service *ValuesServerService `json:"service,omitempty" yaml:"service,omitempty" mapstructure:"service,omitempty"`

	// ServiceAccount corresponds to the JSON schema field "serviceAccount".
	ServiceAccount *ValuesServerServiceAccount `json:"serviceAccount,omitempty" yaml:"serviceAccount,omitempty" mapstructure:"serviceAccount,omitempty"`

	// ShareProcessNamespace corresponds to the JSON schema field
	// "shareProcessNamespace".
	ShareProcessNamespace *bool `json:"shareProcessNamespace,omitempty" yaml:"shareProcessNamespace,omitempty" mapstructure:"shareProcessNamespace,omitempty"`

	// Standalone corresponds to the JSON schema field "standalone".
	Standalone *ValuesServerStandalone `json:"standalone,omitempty" yaml:"standalone,omitempty" mapstructure:"standalone,omitempty"`

	// StatefulSet corresponds to the JSON schema field "statefulSet".
	StatefulSet *ValuesServerStatefulSet `json:"statefulSet,omitempty" yaml:"statefulSet,omitempty" mapstructure:"statefulSet,omitempty"`

	// TerminationGracePeriodSeconds corresponds to the JSON schema field
	// "terminationGracePeriodSeconds".
	TerminationGracePeriodSeconds *int `json:"terminationGracePeriodSeconds,omitempty" yaml:"terminationGracePeriodSeconds,omitempty" mapstructure:"terminationGracePeriodSeconds,omitempty"`

	// Tolerations corresponds to the JSON schema field "tolerations".
	Tolerations interface{} `json:"tolerations,omitempty" yaml:"tolerations,omitempty" mapstructure:"tolerations,omitempty"`

	// TopologySpreadConstraints corresponds to the JSON schema field
	// "topologySpreadConstraints".
	TopologySpreadConstraints interface{} `json:"topologySpreadConstraints,omitempty" yaml:"topologySpreadConstraints,omitempty" mapstructure:"topologySpreadConstraints,omitempty"`

	// UpdateStrategyType corresponds to the JSON schema field "updateStrategyType".
	UpdateStrategyType *string `json:"updateStrategyType,omitempty" yaml:"updateStrategyType,omitempty" mapstructure:"updateStrategyType,omitempty"`

	// VolumeMounts corresponds to the JSON schema field "volumeMounts".
	VolumeMounts []interface{} `json:"volumeMounts,omitempty" yaml:"volumeMounts,omitempty" mapstructure:"volumeMounts,omitempty"`

	// Volumes corresponds to the JSON schema field "volumes".
	Volumes []interface{} `json:"volumes,omitempty" yaml:"volumes,omitempty" mapstructure:"volumes,omitempty"`
}

type ValuesServerAuditStorage struct {
	// AccessMode corresponds to the JSON schema field "accessMode".
	AccessMode *string `json:"accessMode,omitempty" yaml:"accessMode,omitempty" mapstructure:"accessMode,omitempty"`

	// Annotations corresponds to the JSON schema field "annotations".
	Annotations interface{} `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled interface{} `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Labels corresponds to the JSON schema field "labels".
	Labels interface{} `json:"labels,omitempty" yaml:"labels,omitempty" mapstructure:"labels,omitempty"`

	// MountPath corresponds to the JSON schema field "mountPath".
	MountPath *string `json:"mountPath,omitempty" yaml:"mountPath,omitempty" mapstructure:"mountPath,omitempty"`

	// Size corresponds to the JSON schema field "size".
	Size *string `json:"size,omitempty" yaml:"size,omitempty" mapstructure:"size,omitempty"`

	// StorageClass corresponds to the JSON schema field "storageClass".
	StorageClass *string `json:"storageClass,omitempty" yaml:"storageClass,omitempty" mapstructure:"storageClass,omitempty"`
}

type ValuesServerAuthDelegator struct {
	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

type ValuesServerDataStorage struct {
	// AccessMode corresponds to the JSON schema field "accessMode".
	AccessMode *string `json:"accessMode,omitempty" yaml:"accessMode,omitempty" mapstructure:"accessMode,omitempty"`

	// Annotations corresponds to the JSON schema field "annotations".
	Annotations interface{} `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled interface{} `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Labels corresponds to the JSON schema field "labels".
	Labels interface{} `json:"labels,omitempty" yaml:"labels,omitempty" mapstructure:"labels,omitempty"`

	// MountPath corresponds to the JSON schema field "mountPath".
	MountPath *string `json:"mountPath,omitempty" yaml:"mountPath,omitempty" mapstructure:"mountPath,omitempty"`

	// Size corresponds to the JSON schema field "size".
	Size *string `json:"size,omitempty" yaml:"size,omitempty" mapstructure:"size,omitempty"`

	// StorageClass corresponds to the JSON schema field "storageClass".
	StorageClass *string `json:"storageClass,omitempty" yaml:"storageClass,omitempty" mapstructure:"storageClass,omitempty"`
}

type ValuesServerDev struct {
	// DevRootToken corresponds to the JSON schema field "devRootToken".
	DevRootToken *string `json:"devRootToken,omitempty" yaml:"devRootToken,omitempty" mapstructure:"devRootToken,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

type ValuesServerEnterpriseLicense struct {
	// SecretKey corresponds to the JSON schema field "secretKey".
	SecretKey *string `json:"secretKey,omitempty" yaml:"secretKey,omitempty" mapstructure:"secretKey,omitempty"`

	// SecretName corresponds to the JSON schema field "secretName".
	SecretName *string `json:"secretName,omitempty" yaml:"secretName,omitempty" mapstructure:"secretName,omitempty"`
}

type ValuesServerExtraEnvironmentVars map[string]interface{}

type ValuesServerExtraLabels map[string]interface{}

type ValuesServerHa struct {
	// ApiAddr corresponds to the JSON schema field "apiAddr".
	ApiAddr *string `json:"apiAddr,omitempty" yaml:"apiAddr,omitempty" mapstructure:"apiAddr,omitempty"`

	// ClusterAddr corresponds to the JSON schema field "clusterAddr".
	ClusterAddr *string `json:"clusterAddr,omitempty" yaml:"clusterAddr,omitempty" mapstructure:"clusterAddr,omitempty"`

	// Config corresponds to the JSON schema field "config".
	Config interface{} `json:"config,omitempty" yaml:"config,omitempty" mapstructure:"config,omitempty"`

	// DisruptionBudget corresponds to the JSON schema field "disruptionBudget".
	DisruptionBudget *ValuesServerHaDisruptionBudget `json:"disruptionBudget,omitempty" yaml:"disruptionBudget,omitempty" mapstructure:"disruptionBudget,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Raft corresponds to the JSON schema field "raft".
	Raft *ValuesServerHaRaft `json:"raft,omitempty" yaml:"raft,omitempty" mapstructure:"raft,omitempty"`

	// Replicas corresponds to the JSON schema field "replicas".
	Replicas *int `json:"replicas,omitempty" yaml:"replicas,omitempty" mapstructure:"replicas,omitempty"`
}

type ValuesServerHaDisruptionBudget struct {
	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// MaxUnavailable corresponds to the JSON schema field "maxUnavailable".
	MaxUnavailable *int `json:"maxUnavailable,omitempty" yaml:"maxUnavailable,omitempty" mapstructure:"maxUnavailable,omitempty"`
}

type ValuesServerHaRaft struct {
	// Config corresponds to the JSON schema field "config".
	Config interface{} `json:"config,omitempty" yaml:"config,omitempty" mapstructure:"config,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// SetNodeId corresponds to the JSON schema field "setNodeId".
	SetNodeId *bool `json:"setNodeId,omitempty" yaml:"setNodeId,omitempty" mapstructure:"setNodeId,omitempty"`
}

type ValuesServerImage struct {
	// PullPolicy corresponds to the JSON schema field "pullPolicy".
	PullPolicy *string `json:"pullPolicy,omitempty" yaml:"pullPolicy,omitempty" mapstructure:"pullPolicy,omitempty"`

	// Repository corresponds to the JSON schema field "repository".
	Repository *string `json:"repository,omitempty" yaml:"repository,omitempty" mapstructure:"repository,omitempty"`

	// Tag corresponds to the JSON schema field "tag".
	Tag *string `json:"tag,omitempty" yaml:"tag,omitempty" mapstructure:"tag,omitempty"`
}

type ValuesServerIngress struct {
	// ActiveService corresponds to the JSON schema field "activeService".
	ActiveService *bool `json:"activeService,omitempty" yaml:"activeService,omitempty" mapstructure:"activeService,omitempty"`

	// Annotations corresponds to the JSON schema field "annotations".
	Annotations interface{} `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// ExtraPaths corresponds to the JSON schema field "extraPaths".
	ExtraPaths []interface{} `json:"extraPaths,omitempty" yaml:"extraPaths,omitempty" mapstructure:"extraPaths,omitempty"`

	// Hosts corresponds to the JSON schema field "hosts".
	Hosts []ValuesServerIngressHostsElem `json:"hosts,omitempty" yaml:"hosts,omitempty" mapstructure:"hosts,omitempty"`

	// IngressClassName corresponds to the JSON schema field "ingressClassName".
	IngressClassName *string `json:"ingressClassName,omitempty" yaml:"ingressClassName,omitempty" mapstructure:"ingressClassName,omitempty"`

	// Labels corresponds to the JSON schema field "labels".
	Labels ValuesServerIngressLabels `json:"labels,omitempty" yaml:"labels,omitempty" mapstructure:"labels,omitempty"`

	// PathType corresponds to the JSON schema field "pathType".
	PathType *string `json:"pathType,omitempty" yaml:"pathType,omitempty" mapstructure:"pathType,omitempty"`

	// Tls corresponds to the JSON schema field "tls".
	Tls []interface{} `json:"tls,omitempty" yaml:"tls,omitempty" mapstructure:"tls,omitempty"`
}

type ValuesServerIngressHostsElem struct {
	// Host corresponds to the JSON schema field "host".
	Host *string `json:"host,omitempty" yaml:"host,omitempty" mapstructure:"host,omitempty"`

	// Paths corresponds to the JSON schema field "paths".
	Paths []interface{} `json:"paths,omitempty" yaml:"paths,omitempty" mapstructure:"paths,omitempty"`
}

type ValuesServerIngressLabels map[string]interface{}

type ValuesServerLivenessProbe struct {
	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// ExecCommand corresponds to the JSON schema field "execCommand".
	ExecCommand []interface{} `json:"execCommand,omitempty" yaml:"execCommand,omitempty" mapstructure:"execCommand,omitempty"`

	// FailureThreshold corresponds to the JSON schema field "failureThreshold".
	FailureThreshold *int `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// InitialDelaySeconds corresponds to the JSON schema field "initialDelaySeconds".
	InitialDelaySeconds *int `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Path corresponds to the JSON schema field "path".
	Path *string `json:"path,omitempty" yaml:"path,omitempty" mapstructure:"path,omitempty"`

	// PeriodSeconds corresponds to the JSON schema field "periodSeconds".
	PeriodSeconds *int `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Port corresponds to the JSON schema field "port".
	Port *int `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`

	// SuccessThreshold corresponds to the JSON schema field "successThreshold".
	SuccessThreshold *int `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// TimeoutSeconds corresponds to the JSON schema field "timeoutSeconds".
	TimeoutSeconds *int `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesServerNetworkPolicy struct {
	// Egress corresponds to the JSON schema field "egress".
	Egress []interface{} `json:"egress,omitempty" yaml:"egress,omitempty" mapstructure:"egress,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Ingress corresponds to the JSON schema field "ingress".
	Ingress []interface{} `json:"ingress,omitempty" yaml:"ingress,omitempty" mapstructure:"ingress,omitempty"`
}

type ValuesServerPersistentVolumeClaimRetentionPolicy struct {
	// WhenDeleted corresponds to the JSON schema field "whenDeleted".
	WhenDeleted *string `json:"whenDeleted,omitempty" yaml:"whenDeleted,omitempty" mapstructure:"whenDeleted,omitempty"`

	// WhenScaled corresponds to the JSON schema field "whenScaled".
	WhenScaled *string `json:"whenScaled,omitempty" yaml:"whenScaled,omitempty" mapstructure:"whenScaled,omitempty"`
}

type ValuesServerReadinessProbe struct {
	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// FailureThreshold corresponds to the JSON schema field "failureThreshold".
	FailureThreshold *int `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// InitialDelaySeconds corresponds to the JSON schema field "initialDelaySeconds".
	InitialDelaySeconds *int `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// PeriodSeconds corresponds to the JSON schema field "periodSeconds".
	PeriodSeconds *int `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Port corresponds to the JSON schema field "port".
	Port *int `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`

	// SuccessThreshold corresponds to the JSON schema field "successThreshold".
	SuccessThreshold *int `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// TimeoutSeconds corresponds to the JSON schema field "timeoutSeconds".
	TimeoutSeconds *int `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesServerResources map[string]interface{}

type ValuesServerRoute struct {
	// ActiveService corresponds to the JSON schema field "activeService".
	ActiveService *bool `json:"activeService,omitempty" yaml:"activeService,omitempty" mapstructure:"activeService,omitempty"`

	// Annotations corresponds to the JSON schema field "annotations".
	Annotations interface{} `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Host corresponds to the JSON schema field "host".
	Host *string `json:"host,omitempty" yaml:"host,omitempty" mapstructure:"host,omitempty"`

	// Labels corresponds to the JSON schema field "labels".
	Labels ValuesServerRouteLabels `json:"labels,omitempty" yaml:"labels,omitempty" mapstructure:"labels,omitempty"`

	// Tls corresponds to the JSON schema field "tls".
	Tls ValuesServerRouteTls `json:"tls,omitempty" yaml:"tls,omitempty" mapstructure:"tls,omitempty"`
}

type ValuesServerRouteLabels map[string]interface{}

type ValuesServerRouteTls map[string]interface{}

type ValuesServerService struct {
	// Active corresponds to the JSON schema field "active".
	Active *ValuesServerServiceActive `json:"active,omitempty" yaml:"active,omitempty" mapstructure:"active,omitempty"`

	// ActiveNodePort corresponds to the JSON schema field "activeNodePort".
	ActiveNodePort *int `json:"activeNodePort,omitempty" yaml:"activeNodePort,omitempty" mapstructure:"activeNodePort,omitempty"`

	// Annotations corresponds to the JSON schema field "annotations".
	Annotations interface{} `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// ExternalTrafficPolicy corresponds to the JSON schema field
	// "externalTrafficPolicy".
	ExternalTrafficPolicy *string `json:"externalTrafficPolicy,omitempty" yaml:"externalTrafficPolicy,omitempty" mapstructure:"externalTrafficPolicy,omitempty"`

	// InstanceSelector corresponds to the JSON schema field "instanceSelector".
	InstanceSelector *ValuesServerServiceInstanceSelector `json:"instanceSelector,omitempty" yaml:"instanceSelector,omitempty" mapstructure:"instanceSelector,omitempty"`

	// IpFamilies corresponds to the JSON schema field "ipFamilies".
	IpFamilies []interface{} `json:"ipFamilies,omitempty" yaml:"ipFamilies,omitempty" mapstructure:"ipFamilies,omitempty"`

	// IpFamilyPolicy corresponds to the JSON schema field "ipFamilyPolicy".
	IpFamilyPolicy *string `json:"ipFamilyPolicy,omitempty" yaml:"ipFamilyPolicy,omitempty" mapstructure:"ipFamilyPolicy,omitempty"`

	// NodePort corresponds to the JSON schema field "nodePort".
	NodePort *int `json:"nodePort,omitempty" yaml:"nodePort,omitempty" mapstructure:"nodePort,omitempty"`

	// Port corresponds to the JSON schema field "port".
	Port *int `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`

	// PublishNotReadyAddresses corresponds to the JSON schema field
	// "publishNotReadyAddresses".
	PublishNotReadyAddresses *bool `json:"publishNotReadyAddresses,omitempty" yaml:"publishNotReadyAddresses,omitempty" mapstructure:"publishNotReadyAddresses,omitempty"`

	// Standby corresponds to the JSON schema field "standby".
	Standby *ValuesServerServiceStandby `json:"standby,omitempty" yaml:"standby,omitempty" mapstructure:"standby,omitempty"`

	// StandbyNodePort corresponds to the JSON schema field "standbyNodePort".
	StandbyNodePort *int `json:"standbyNodePort,omitempty" yaml:"standbyNodePort,omitempty" mapstructure:"standbyNodePort,omitempty"`

	// TargetPort corresponds to the JSON schema field "targetPort".
	TargetPort *int `json:"targetPort,omitempty" yaml:"targetPort,omitempty" mapstructure:"targetPort,omitempty"`
}

type ValuesServerServiceAccount struct {
	// Annotations corresponds to the JSON schema field "annotations".
	Annotations interface{} `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Create corresponds to the JSON schema field "create".
	Create *bool `json:"create,omitempty" yaml:"create,omitempty" mapstructure:"create,omitempty"`

	// CreateSecret corresponds to the JSON schema field "createSecret".
	CreateSecret *bool `json:"createSecret,omitempty" yaml:"createSecret,omitempty" mapstructure:"createSecret,omitempty"`

	// ExtraLabels corresponds to the JSON schema field "extraLabels".
	ExtraLabels ValuesServerServiceAccountExtraLabels `json:"extraLabels,omitempty" yaml:"extraLabels,omitempty" mapstructure:"extraLabels,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// ServiceDiscovery corresponds to the JSON schema field "serviceDiscovery".
	ServiceDiscovery *ValuesServerServiceAccountServiceDiscovery `json:"serviceDiscovery,omitempty" yaml:"serviceDiscovery,omitempty" mapstructure:"serviceDiscovery,omitempty"`
}

type ValuesServerServiceAccountExtraLabels map[string]interface{}

type ValuesServerServiceAccountServiceDiscovery struct {
	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

type ValuesServerServiceActive struct {
	// Annotations corresponds to the JSON schema field "annotations".
	Annotations interface{} `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

type ValuesServerServiceInstanceSelector struct {
	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

type ValuesServerServiceStandby struct {
	// Annotations corresponds to the JSON schema field "annotations".
	Annotations interface{} `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

type ValuesServerStandalone struct {
	// Config corresponds to the JSON schema field "config".
	Config interface{} `json:"config,omitempty" yaml:"config,omitempty" mapstructure:"config,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled interface{} `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

type ValuesServerStatefulSet struct {
	// Annotations corresponds to the JSON schema field "annotations".
	Annotations interface{} `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// SecurityContext corresponds to the JSON schema field "securityContext".
	SecurityContext *ValuesServerStatefulSetSecurityContext `json:"securityContext,omitempty" yaml:"securityContext,omitempty" mapstructure:"securityContext,omitempty"`
}

type ValuesServerStatefulSetSecurityContext struct {
	// Container corresponds to the JSON schema field "container".
	Container interface{} `json:"container,omitempty" yaml:"container,omitempty" mapstructure:"container,omitempty"`

	// Pod corresponds to the JSON schema field "pod".
	Pod interface{} `json:"pod,omitempty" yaml:"pod,omitempty" mapstructure:"pod,omitempty"`
}

type ValuesServerTelemetry struct {
	// PrometheusRules corresponds to the JSON schema field "prometheusRules".
	PrometheusRules *ValuesServerTelemetryPrometheusRules `json:"prometheusRules,omitempty" yaml:"prometheusRules,omitempty" mapstructure:"prometheusRules,omitempty"`

	// ServiceMonitor corresponds to the JSON schema field "serviceMonitor".
	ServiceMonitor *ValuesServerTelemetryServiceMonitor `json:"serviceMonitor,omitempty" yaml:"serviceMonitor,omitempty" mapstructure:"serviceMonitor,omitempty"`
}

type ValuesServerTelemetryPrometheusRules struct {
	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Rules corresponds to the JSON schema field "rules".
	Rules []interface{} `json:"rules,omitempty" yaml:"rules,omitempty" mapstructure:"rules,omitempty"`

	// Selectors corresponds to the JSON schema field "selectors".
	Selectors ValuesServerTelemetryPrometheusRulesSelectors `json:"selectors,omitempty" yaml:"selectors,omitempty" mapstructure:"selectors,omitempty"`
}

type ValuesServerTelemetryPrometheusRulesSelectors map[string]interface{}

type ValuesServerTelemetryServiceMonitor struct {
	// Authorization corresponds to the JSON schema field "authorization".
	Authorization ValuesServerTelemetryServiceMonitorAuthorization `json:"authorization,omitempty" yaml:"authorization,omitempty" mapstructure:"authorization,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Interval corresponds to the JSON schema field "interval".
	Interval *string `json:"interval,omitempty" yaml:"interval,omitempty" mapstructure:"interval,omitempty"`

	// ScrapeTimeout corresponds to the JSON schema field "scrapeTimeout".
	ScrapeTimeout *string `json:"scrapeTimeout,omitempty" yaml:"scrapeTimeout,omitempty" mapstructure:"scrapeTimeout,omitempty"`

	// Selectors corresponds to the JSON schema field "selectors".
	Selectors ValuesServerTelemetryServiceMonitorSelectors `json:"selectors,omitempty" yaml:"selectors,omitempty" mapstructure:"selectors,omitempty"`

	// TlsConfig corresponds to the JSON schema field "tlsConfig".
	TlsConfig ValuesServerTelemetryServiceMonitorTlsConfig `json:"tlsConfig,omitempty" yaml:"tlsConfig,omitempty" mapstructure:"tlsConfig,omitempty"`
}

type ValuesServerTelemetryServiceMonitorAuthorization map[string]interface{}

type ValuesServerTelemetryServiceMonitorSelectors map[string]interface{}

type ValuesServerTelemetryServiceMonitorTlsConfig map[string]interface{}

type ValuesUi struct {
	// ActiveVaultPodOnly corresponds to the JSON schema field "activeVaultPodOnly".
	ActiveVaultPodOnly *bool `json:"activeVaultPodOnly,omitempty" yaml:"activeVaultPodOnly,omitempty" mapstructure:"activeVaultPodOnly,omitempty"`

	// Annotations corresponds to the JSON schema field "annotations".
	Annotations interface{} `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled interface{} `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// ExternalPort corresponds to the JSON schema field "externalPort".
	ExternalPort *int `json:"externalPort,omitempty" yaml:"externalPort,omitempty" mapstructure:"externalPort,omitempty"`

	// ExternalTrafficPolicy corresponds to the JSON schema field
	// "externalTrafficPolicy".
	ExternalTrafficPolicy *string `json:"externalTrafficPolicy,omitempty" yaml:"externalTrafficPolicy,omitempty" mapstructure:"externalTrafficPolicy,omitempty"`

	// PublishNotReadyAddresses corresponds to the JSON schema field
	// "publishNotReadyAddresses".
	PublishNotReadyAddresses *bool `json:"publishNotReadyAddresses,omitempty" yaml:"publishNotReadyAddresses,omitempty" mapstructure:"publishNotReadyAddresses,omitempty"`

	// ServiceIPFamilies corresponds to the JSON schema field "serviceIPFamilies".
	ServiceIPFamilies []interface{} `json:"serviceIPFamilies,omitempty" yaml:"serviceIPFamilies,omitempty" mapstructure:"serviceIPFamilies,omitempty"`

	// ServiceIPFamilyPolicy corresponds to the JSON schema field
	// "serviceIPFamilyPolicy".
	ServiceIPFamilyPolicy *string `json:"serviceIPFamilyPolicy,omitempty" yaml:"serviceIPFamilyPolicy,omitempty" mapstructure:"serviceIPFamilyPolicy,omitempty"`

	// ServiceNodePort corresponds to the JSON schema field "serviceNodePort".
	ServiceNodePort *int `json:"serviceNodePort,omitempty" yaml:"serviceNodePort,omitempty" mapstructure:"serviceNodePort,omitempty"`

	// ServiceType corresponds to the JSON schema field "serviceType".
	ServiceType *string `json:"serviceType,omitempty" yaml:"serviceType,omitempty" mapstructure:"serviceType,omitempty"`

	// TargetPort corresponds to the JSON schema field "targetPort".
	TargetPort *int `json:"targetPort,omitempty" yaml:"targetPort,omitempty" mapstructure:"targetPort,omitempty"`
}
