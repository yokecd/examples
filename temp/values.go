// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package temp

type Values struct {
	// Affinity corresponds to the JSON schema field "affinity".
	Affinity ValuesAffinity `json:"affinity,omitempty" yaml:"affinity,omitempty" mapstructure:"affinity,omitempty"`

	// BitwardenSdkServer corresponds to the JSON schema field "bitwarden-sdk-server".
	BitwardenSdkServer *ValuesBitwardenSdkServer `json:"bitwarden-sdk-server,omitempty" yaml:"bitwarden-sdk-server,omitempty" mapstructure:"bitwarden-sdk-server,omitempty"`

	// CertController corresponds to the JSON schema field "certController".
	CertController *ValuesCertController `json:"certController,omitempty" yaml:"certController,omitempty" mapstructure:"certController,omitempty"`

	// CommonLabels corresponds to the JSON schema field "commonLabels".
	CommonLabels ValuesCommonLabels `json:"commonLabels,omitempty" yaml:"commonLabels,omitempty" mapstructure:"commonLabels,omitempty"`

	// Concurrent corresponds to the JSON schema field "concurrent".
	Concurrent *int `json:"concurrent,omitempty" yaml:"concurrent,omitempty" mapstructure:"concurrent,omitempty"`

	// ControllerClass corresponds to the JSON schema field "controllerClass".
	ControllerClass *string `json:"controllerClass,omitempty" yaml:"controllerClass,omitempty" mapstructure:"controllerClass,omitempty"`

	// Crds corresponds to the JSON schema field "crds".
	Crds *ValuesCrds `json:"crds,omitempty" yaml:"crds,omitempty" mapstructure:"crds,omitempty"`

	// CreateOperator corresponds to the JSON schema field "createOperator".
	CreateOperator *bool `json:"createOperator,omitempty" yaml:"createOperator,omitempty" mapstructure:"createOperator,omitempty"`

	// DeploymentAnnotations corresponds to the JSON schema field
	// "deploymentAnnotations".
	DeploymentAnnotations ValuesDeploymentAnnotations `json:"deploymentAnnotations,omitempty" yaml:"deploymentAnnotations,omitempty" mapstructure:"deploymentAnnotations,omitempty"`

	// DnsConfig corresponds to the JSON schema field "dnsConfig".
	DnsConfig ValuesDnsConfig `json:"dnsConfig,omitempty" yaml:"dnsConfig,omitempty" mapstructure:"dnsConfig,omitempty"`

	// DnsPolicy corresponds to the JSON schema field "dnsPolicy".
	DnsPolicy *string `json:"dnsPolicy,omitempty" yaml:"dnsPolicy,omitempty" mapstructure:"dnsPolicy,omitempty"`

	// ExtendedMetricLabels corresponds to the JSON schema field
	// "extendedMetricLabels".
	ExtendedMetricLabels *bool `json:"extendedMetricLabels,omitempty" yaml:"extendedMetricLabels,omitempty" mapstructure:"extendedMetricLabels,omitempty"`

	// ExtraArgs corresponds to the JSON schema field "extraArgs".
	ExtraArgs ValuesExtraArgs `json:"extraArgs,omitempty" yaml:"extraArgs,omitempty" mapstructure:"extraArgs,omitempty"`

	// ExtraContainers corresponds to the JSON schema field "extraContainers".
	ExtraContainers []interface{} `json:"extraContainers,omitempty" yaml:"extraContainers,omitempty" mapstructure:"extraContainers,omitempty"`

	// ExtraEnv corresponds to the JSON schema field "extraEnv".
	ExtraEnv []interface{} `json:"extraEnv,omitempty" yaml:"extraEnv,omitempty" mapstructure:"extraEnv,omitempty"`

	// ExtraObjects corresponds to the JSON schema field "extraObjects".
	ExtraObjects []interface{} `json:"extraObjects,omitempty" yaml:"extraObjects,omitempty" mapstructure:"extraObjects,omitempty"`

	// ExtraVolumeMounts corresponds to the JSON schema field "extraVolumeMounts".
	ExtraVolumeMounts []interface{} `json:"extraVolumeMounts,omitempty" yaml:"extraVolumeMounts,omitempty" mapstructure:"extraVolumeMounts,omitempty"`

	// ExtraVolumes corresponds to the JSON schema field "extraVolumes".
	ExtraVolumes []interface{} `json:"extraVolumes,omitempty" yaml:"extraVolumes,omitempty" mapstructure:"extraVolumes,omitempty"`

	// FullnameOverride corresponds to the JSON schema field "fullnameOverride".
	FullnameOverride *string `json:"fullnameOverride,omitempty" yaml:"fullnameOverride,omitempty" mapstructure:"fullnameOverride,omitempty"`

	// Global corresponds to the JSON schema field "global".
	Global *ValuesGlobal `json:"global,omitempty" yaml:"global,omitempty" mapstructure:"global,omitempty"`

	// HostNetwork corresponds to the JSON schema field "hostNetwork".
	HostNetwork *bool `json:"hostNetwork,omitempty" yaml:"hostNetwork,omitempty" mapstructure:"hostNetwork,omitempty"`

	// Image corresponds to the JSON schema field "image".
	Image *ValuesImage `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// ImagePullSecrets corresponds to the JSON schema field "imagePullSecrets".
	ImagePullSecrets []interface{} `json:"imagePullSecrets,omitempty" yaml:"imagePullSecrets,omitempty" mapstructure:"imagePullSecrets,omitempty"`

	// InstallCRDs corresponds to the JSON schema field "installCRDs".
	InstallCRDs *bool `json:"installCRDs,omitempty" yaml:"installCRDs,omitempty" mapstructure:"installCRDs,omitempty"`

	// LeaderElect corresponds to the JSON schema field "leaderElect".
	LeaderElect *bool `json:"leaderElect,omitempty" yaml:"leaderElect,omitempty" mapstructure:"leaderElect,omitempty"`

	// Log corresponds to the JSON schema field "log".
	Log *ValuesLog `json:"log,omitempty" yaml:"log,omitempty" mapstructure:"log,omitempty"`

	// Metrics corresponds to the JSON schema field "metrics".
	Metrics *ValuesMetrics `json:"metrics,omitempty" yaml:"metrics,omitempty" mapstructure:"metrics,omitempty"`

	// NameOverride corresponds to the JSON schema field "nameOverride".
	NameOverride *string `json:"nameOverride,omitempty" yaml:"nameOverride,omitempty" mapstructure:"nameOverride,omitempty"`

	// NamespaceOverride corresponds to the JSON schema field "namespaceOverride".
	NamespaceOverride *string `json:"namespaceOverride,omitempty" yaml:"namespaceOverride,omitempty" mapstructure:"namespaceOverride,omitempty"`

	// NodeSelector corresponds to the JSON schema field "nodeSelector".
	NodeSelector ValuesNodeSelector `json:"nodeSelector,omitempty" yaml:"nodeSelector,omitempty" mapstructure:"nodeSelector,omitempty"`

	// OpenshiftFinalizers corresponds to the JSON schema field "openshiftFinalizers".
	OpenshiftFinalizers *bool `json:"openshiftFinalizers,omitempty" yaml:"openshiftFinalizers,omitempty" mapstructure:"openshiftFinalizers,omitempty"`

	// PodAnnotations corresponds to the JSON schema field "podAnnotations".
	PodAnnotations ValuesPodAnnotations `json:"podAnnotations,omitempty" yaml:"podAnnotations,omitempty" mapstructure:"podAnnotations,omitempty"`

	// PodDisruptionBudget corresponds to the JSON schema field "podDisruptionBudget".
	PodDisruptionBudget *ValuesPodDisruptionBudget `json:"podDisruptionBudget,omitempty" yaml:"podDisruptionBudget,omitempty" mapstructure:"podDisruptionBudget,omitempty"`

	// PodLabels corresponds to the JSON schema field "podLabels".
	PodLabels ValuesPodLabels `json:"podLabels,omitempty" yaml:"podLabels,omitempty" mapstructure:"podLabels,omitempty"`

	// PodSecurityContext corresponds to the JSON schema field "podSecurityContext".
	PodSecurityContext *ValuesPodSecurityContext `json:"podSecurityContext,omitempty" yaml:"podSecurityContext,omitempty" mapstructure:"podSecurityContext,omitempty"`

	// PodSpecExtra corresponds to the JSON schema field "podSpecExtra".
	PodSpecExtra ValuesPodSpecExtra `json:"podSpecExtra,omitempty" yaml:"podSpecExtra,omitempty" mapstructure:"podSpecExtra,omitempty"`

	// PriorityClassName corresponds to the JSON schema field "priorityClassName".
	PriorityClassName *string `json:"priorityClassName,omitempty" yaml:"priorityClassName,omitempty" mapstructure:"priorityClassName,omitempty"`

	// ProcessClusterExternalSecret corresponds to the JSON schema field
	// "processClusterExternalSecret".
	ProcessClusterExternalSecret *bool `json:"processClusterExternalSecret,omitempty" yaml:"processClusterExternalSecret,omitempty" mapstructure:"processClusterExternalSecret,omitempty"`

	// ProcessClusterPushSecret corresponds to the JSON schema field
	// "processClusterPushSecret".
	ProcessClusterPushSecret *bool `json:"processClusterPushSecret,omitempty" yaml:"processClusterPushSecret,omitempty" mapstructure:"processClusterPushSecret,omitempty"`

	// ProcessClusterStore corresponds to the JSON schema field "processClusterStore".
	ProcessClusterStore *bool `json:"processClusterStore,omitempty" yaml:"processClusterStore,omitempty" mapstructure:"processClusterStore,omitempty"`

	// ProcessPushSecret corresponds to the JSON schema field "processPushSecret".
	ProcessPushSecret *bool `json:"processPushSecret,omitempty" yaml:"processPushSecret,omitempty" mapstructure:"processPushSecret,omitempty"`

	// Rbac corresponds to the JSON schema field "rbac".
	Rbac *ValuesRbac `json:"rbac,omitempty" yaml:"rbac,omitempty" mapstructure:"rbac,omitempty"`

	// ReplicaCount corresponds to the JSON schema field "replicaCount".
	ReplicaCount *int `json:"replicaCount,omitempty" yaml:"replicaCount,omitempty" mapstructure:"replicaCount,omitempty"`

	// Resources corresponds to the JSON schema field "resources".
	Resources ValuesResources `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`

	// RevisionHistoryLimit corresponds to the JSON schema field
	// "revisionHistoryLimit".
	RevisionHistoryLimit *int `json:"revisionHistoryLimit,omitempty" yaml:"revisionHistoryLimit,omitempty" mapstructure:"revisionHistoryLimit,omitempty"`

	// ScopedNamespace corresponds to the JSON schema field "scopedNamespace".
	ScopedNamespace *string `json:"scopedNamespace,omitempty" yaml:"scopedNamespace,omitempty" mapstructure:"scopedNamespace,omitempty"`

	// ScopedRBAC corresponds to the JSON schema field "scopedRBAC".
	ScopedRBAC *bool `json:"scopedRBAC,omitempty" yaml:"scopedRBAC,omitempty" mapstructure:"scopedRBAC,omitempty"`

	// SecurityContext corresponds to the JSON schema field "securityContext".
	SecurityContext *ValuesSecurityContext `json:"securityContext,omitempty" yaml:"securityContext,omitempty" mapstructure:"securityContext,omitempty"`

	// Service corresponds to the JSON schema field "service".
	Service *ValuesService `json:"service,omitempty" yaml:"service,omitempty" mapstructure:"service,omitempty"`

	// ServiceAccount corresponds to the JSON schema field "serviceAccount".
	ServiceAccount *ValuesServiceAccount `json:"serviceAccount,omitempty" yaml:"serviceAccount,omitempty" mapstructure:"serviceAccount,omitempty"`

	// ServiceMonitor corresponds to the JSON schema field "serviceMonitor".
	ServiceMonitor *ValuesServiceMonitor `json:"serviceMonitor,omitempty" yaml:"serviceMonitor,omitempty" mapstructure:"serviceMonitor,omitempty"`

	// Tolerations corresponds to the JSON schema field "tolerations".
	Tolerations []interface{} `json:"tolerations,omitempty" yaml:"tolerations,omitempty" mapstructure:"tolerations,omitempty"`

	// TopologySpreadConstraints corresponds to the JSON schema field
	// "topologySpreadConstraints".
	TopologySpreadConstraints []interface{} `json:"topologySpreadConstraints,omitempty" yaml:"topologySpreadConstraints,omitempty" mapstructure:"topologySpreadConstraints,omitempty"`

	// Webhook corresponds to the JSON schema field "webhook".
	Webhook *ValuesWebhook `json:"webhook,omitempty" yaml:"webhook,omitempty" mapstructure:"webhook,omitempty"`
}

type ValuesAffinity map[string]interface{}

type ValuesBitwardenSdkServer struct {
	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

type ValuesCertController struct {
	// Affinity corresponds to the JSON schema field "affinity".
	Affinity ValuesCertControllerAffinity `json:"affinity,omitempty" yaml:"affinity,omitempty" mapstructure:"affinity,omitempty"`

	// Create corresponds to the JSON schema field "create".
	Create *bool `json:"create,omitempty" yaml:"create,omitempty" mapstructure:"create,omitempty"`

	// DeploymentAnnotations corresponds to the JSON schema field
	// "deploymentAnnotations".
	DeploymentAnnotations ValuesCertControllerDeploymentAnnotations `json:"deploymentAnnotations,omitempty" yaml:"deploymentAnnotations,omitempty" mapstructure:"deploymentAnnotations,omitempty"`

	// ExtraArgs corresponds to the JSON schema field "extraArgs".
	ExtraArgs ValuesCertControllerExtraArgs `json:"extraArgs,omitempty" yaml:"extraArgs,omitempty" mapstructure:"extraArgs,omitempty"`

	// ExtraEnv corresponds to the JSON schema field "extraEnv".
	ExtraEnv []interface{} `json:"extraEnv,omitempty" yaml:"extraEnv,omitempty" mapstructure:"extraEnv,omitempty"`

	// ExtraVolumeMounts corresponds to the JSON schema field "extraVolumeMounts".
	ExtraVolumeMounts []interface{} `json:"extraVolumeMounts,omitempty" yaml:"extraVolumeMounts,omitempty" mapstructure:"extraVolumeMounts,omitempty"`

	// ExtraVolumes corresponds to the JSON schema field "extraVolumes".
	ExtraVolumes []interface{} `json:"extraVolumes,omitempty" yaml:"extraVolumes,omitempty" mapstructure:"extraVolumes,omitempty"`

	// FullnameOverride corresponds to the JSON schema field "fullnameOverride".
	FullnameOverride *string `json:"fullnameOverride,omitempty" yaml:"fullnameOverride,omitempty" mapstructure:"fullnameOverride,omitempty"`

	// HostNetwork corresponds to the JSON schema field "hostNetwork".
	HostNetwork *bool `json:"hostNetwork,omitempty" yaml:"hostNetwork,omitempty" mapstructure:"hostNetwork,omitempty"`

	// Image corresponds to the JSON schema field "image".
	Image *ValuesCertControllerImage `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// ImagePullSecrets corresponds to the JSON schema field "imagePullSecrets".
	ImagePullSecrets []interface{} `json:"imagePullSecrets,omitempty" yaml:"imagePullSecrets,omitempty" mapstructure:"imagePullSecrets,omitempty"`

	// Log corresponds to the JSON schema field "log".
	Log *ValuesCertControllerLog `json:"log,omitempty" yaml:"log,omitempty" mapstructure:"log,omitempty"`

	// Metrics corresponds to the JSON schema field "metrics".
	Metrics *ValuesCertControllerMetrics `json:"metrics,omitempty" yaml:"metrics,omitempty" mapstructure:"metrics,omitempty"`

	// NameOverride corresponds to the JSON schema field "nameOverride".
	NameOverride *string `json:"nameOverride,omitempty" yaml:"nameOverride,omitempty" mapstructure:"nameOverride,omitempty"`

	// NodeSelector corresponds to the JSON schema field "nodeSelector".
	NodeSelector ValuesCertControllerNodeSelector `json:"nodeSelector,omitempty" yaml:"nodeSelector,omitempty" mapstructure:"nodeSelector,omitempty"`

	// PodAnnotations corresponds to the JSON schema field "podAnnotations".
	PodAnnotations ValuesCertControllerPodAnnotations `json:"podAnnotations,omitempty" yaml:"podAnnotations,omitempty" mapstructure:"podAnnotations,omitempty"`

	// PodDisruptionBudget corresponds to the JSON schema field "podDisruptionBudget".
	PodDisruptionBudget *ValuesCertControllerPodDisruptionBudget `json:"podDisruptionBudget,omitempty" yaml:"podDisruptionBudget,omitempty" mapstructure:"podDisruptionBudget,omitempty"`

	// PodLabels corresponds to the JSON schema field "podLabels".
	PodLabels ValuesCertControllerPodLabels `json:"podLabels,omitempty" yaml:"podLabels,omitempty" mapstructure:"podLabels,omitempty"`

	// PodSecurityContext corresponds to the JSON schema field "podSecurityContext".
	PodSecurityContext *ValuesCertControllerPodSecurityContext `json:"podSecurityContext,omitempty" yaml:"podSecurityContext,omitempty" mapstructure:"podSecurityContext,omitempty"`

	// PriorityClassName corresponds to the JSON schema field "priorityClassName".
	PriorityClassName *string `json:"priorityClassName,omitempty" yaml:"priorityClassName,omitempty" mapstructure:"priorityClassName,omitempty"`

	// Rbac corresponds to the JSON schema field "rbac".
	Rbac *ValuesCertControllerRbac `json:"rbac,omitempty" yaml:"rbac,omitempty" mapstructure:"rbac,omitempty"`

	// ReadinessProbe corresponds to the JSON schema field "readinessProbe".
	ReadinessProbe *ValuesCertControllerReadinessProbe `json:"readinessProbe,omitempty" yaml:"readinessProbe,omitempty" mapstructure:"readinessProbe,omitempty"`

	// ReplicaCount corresponds to the JSON schema field "replicaCount".
	ReplicaCount *int `json:"replicaCount,omitempty" yaml:"replicaCount,omitempty" mapstructure:"replicaCount,omitempty"`

	// RequeueInterval corresponds to the JSON schema field "requeueInterval".
	RequeueInterval *string `json:"requeueInterval,omitempty" yaml:"requeueInterval,omitempty" mapstructure:"requeueInterval,omitempty"`

	// Resources corresponds to the JSON schema field "resources".
	Resources ValuesCertControllerResources `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`

	// RevisionHistoryLimit corresponds to the JSON schema field
	// "revisionHistoryLimit".
	RevisionHistoryLimit *int `json:"revisionHistoryLimit,omitempty" yaml:"revisionHistoryLimit,omitempty" mapstructure:"revisionHistoryLimit,omitempty"`

	// SecurityContext corresponds to the JSON schema field "securityContext".
	SecurityContext *ValuesCertControllerSecurityContext `json:"securityContext,omitempty" yaml:"securityContext,omitempty" mapstructure:"securityContext,omitempty"`

	// ServiceAccount corresponds to the JSON schema field "serviceAccount".
	ServiceAccount *ValuesCertControllerServiceAccount `json:"serviceAccount,omitempty" yaml:"serviceAccount,omitempty" mapstructure:"serviceAccount,omitempty"`

	// Tolerations corresponds to the JSON schema field "tolerations".
	Tolerations []interface{} `json:"tolerations,omitempty" yaml:"tolerations,omitempty" mapstructure:"tolerations,omitempty"`

	// TopologySpreadConstraints corresponds to the JSON schema field
	// "topologySpreadConstraints".
	TopologySpreadConstraints []interface{} `json:"topologySpreadConstraints,omitempty" yaml:"topologySpreadConstraints,omitempty" mapstructure:"topologySpreadConstraints,omitempty"`
}

type ValuesCertControllerAffinity map[string]interface{}

type ValuesCertControllerDeploymentAnnotations map[string]interface{}

type ValuesCertControllerExtraArgs map[string]interface{}

type ValuesCertControllerImage struct {
	// Flavour corresponds to the JSON schema field "flavour".
	Flavour *string `json:"flavour,omitempty" yaml:"flavour,omitempty" mapstructure:"flavour,omitempty"`

	// PullPolicy corresponds to the JSON schema field "pullPolicy".
	PullPolicy *string `json:"pullPolicy,omitempty" yaml:"pullPolicy,omitempty" mapstructure:"pullPolicy,omitempty"`

	// Repository corresponds to the JSON schema field "repository".
	Repository *string `json:"repository,omitempty" yaml:"repository,omitempty" mapstructure:"repository,omitempty"`

	// Tag corresponds to the JSON schema field "tag".
	Tag *string `json:"tag,omitempty" yaml:"tag,omitempty" mapstructure:"tag,omitempty"`
}

type ValuesCertControllerLog struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty" yaml:"level,omitempty" mapstructure:"level,omitempty"`

	// TimeEncoding corresponds to the JSON schema field "timeEncoding".
	TimeEncoding *string `json:"timeEncoding,omitempty" yaml:"timeEncoding,omitempty" mapstructure:"timeEncoding,omitempty"`
}

type ValuesCertControllerMetrics struct {
	// Listen corresponds to the JSON schema field "listen".
	Listen *ValuesCertControllerMetricsListen `json:"listen,omitempty" yaml:"listen,omitempty" mapstructure:"listen,omitempty"`

	// Service corresponds to the JSON schema field "service".
	Service *ValuesCertControllerMetricsService `json:"service,omitempty" yaml:"service,omitempty" mapstructure:"service,omitempty"`
}

type ValuesCertControllerMetricsListen struct {
	// Port corresponds to the JSON schema field "port".
	Port *int `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`
}

type ValuesCertControllerMetricsService struct {
	// Annotations corresponds to the JSON schema field "annotations".
	Annotations ValuesCertControllerMetricsServiceAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Port corresponds to the JSON schema field "port".
	Port *int `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`
}

type ValuesCertControllerMetricsServiceAnnotations map[string]interface{}

type ValuesCertControllerNodeSelector map[string]interface{}

type ValuesCertControllerPodAnnotations map[string]interface{}

type ValuesCertControllerPodDisruptionBudget struct {
	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// MinAvailable corresponds to the JSON schema field "minAvailable".
	MinAvailable *int `json:"minAvailable,omitempty" yaml:"minAvailable,omitempty" mapstructure:"minAvailable,omitempty"`
}

type ValuesCertControllerPodLabels map[string]interface{}

type ValuesCertControllerPodSecurityContext struct {
	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

type ValuesCertControllerRbac struct {
	// Create corresponds to the JSON schema field "create".
	Create *bool `json:"create,omitempty" yaml:"create,omitempty" mapstructure:"create,omitempty"`
}

type ValuesCertControllerReadinessProbe struct {
	// Address corresponds to the JSON schema field "address".
	Address *string `json:"address,omitempty" yaml:"address,omitempty" mapstructure:"address,omitempty"`

	// Port corresponds to the JSON schema field "port".
	Port *int `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`
}

type ValuesCertControllerResources map[string]interface{}

type ValuesCertControllerSecurityContext struct {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty" yaml:"allowPrivilegeEscalation,omitempty" mapstructure:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *ValuesCertControllerSecurityContextCapabilities `json:"capabilities,omitempty" yaml:"capabilities,omitempty" mapstructure:"capabilities,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty" yaml:"readOnlyRootFilesystem,omitempty" mapstructure:"readOnlyRootFilesystem,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty" yaml:"runAsNonRoot,omitempty" mapstructure:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int `json:"runAsUser,omitempty" yaml:"runAsUser,omitempty" mapstructure:"runAsUser,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *ValuesCertControllerSecurityContextSeccompProfile `json:"seccompProfile,omitempty" yaml:"seccompProfile,omitempty" mapstructure:"seccompProfile,omitempty"`
}

type ValuesCertControllerSecurityContextCapabilities struct {
	// Drop corresponds to the JSON schema field "drop".
	Drop []string `json:"drop,omitempty" yaml:"drop,omitempty" mapstructure:"drop,omitempty"`
}

type ValuesCertControllerSecurityContextSeccompProfile struct {
	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type ValuesCertControllerServiceAccount struct {
	// Annotations corresponds to the JSON schema field "annotations".
	Annotations ValuesCertControllerServiceAccountAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Automount corresponds to the JSON schema field "automount".
	Automount *bool `json:"automount,omitempty" yaml:"automount,omitempty" mapstructure:"automount,omitempty"`

	// Create corresponds to the JSON schema field "create".
	Create *bool `json:"create,omitempty" yaml:"create,omitempty" mapstructure:"create,omitempty"`

	// ExtraLabels corresponds to the JSON schema field "extraLabels".
	ExtraLabels ValuesCertControllerServiceAccountExtraLabels `json:"extraLabels,omitempty" yaml:"extraLabels,omitempty" mapstructure:"extraLabels,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`
}

type ValuesCertControllerServiceAccountAnnotations map[string]interface{}

type ValuesCertControllerServiceAccountExtraLabels map[string]interface{}

type ValuesCommonLabels map[string]interface{}

type ValuesCrds struct {
	// Annotations corresponds to the JSON schema field "annotations".
	Annotations ValuesCrdsAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Conversion corresponds to the JSON schema field "conversion".
	Conversion *ValuesCrdsConversion `json:"conversion,omitempty" yaml:"conversion,omitempty" mapstructure:"conversion,omitempty"`

	// CreateClusterExternalSecret corresponds to the JSON schema field
	// "createClusterExternalSecret".
	CreateClusterExternalSecret *bool `json:"createClusterExternalSecret,omitempty" yaml:"createClusterExternalSecret,omitempty" mapstructure:"createClusterExternalSecret,omitempty"`

	// CreateClusterGenerator corresponds to the JSON schema field
	// "createClusterGenerator".
	CreateClusterGenerator *bool `json:"createClusterGenerator,omitempty" yaml:"createClusterGenerator,omitempty" mapstructure:"createClusterGenerator,omitempty"`

	// CreateClusterPushSecret corresponds to the JSON schema field
	// "createClusterPushSecret".
	CreateClusterPushSecret *bool `json:"createClusterPushSecret,omitempty" yaml:"createClusterPushSecret,omitempty" mapstructure:"createClusterPushSecret,omitempty"`

	// CreateClusterSecretStore corresponds to the JSON schema field
	// "createClusterSecretStore".
	CreateClusterSecretStore *bool `json:"createClusterSecretStore,omitempty" yaml:"createClusterSecretStore,omitempty" mapstructure:"createClusterSecretStore,omitempty"`

	// CreatePushSecret corresponds to the JSON schema field "createPushSecret".
	CreatePushSecret *bool `json:"createPushSecret,omitempty" yaml:"createPushSecret,omitempty" mapstructure:"createPushSecret,omitempty"`
}

type ValuesCrdsAnnotations map[string]interface{}

type ValuesCrdsConversion struct {
	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

type ValuesDeploymentAnnotations map[string]interface{}

type ValuesDnsConfig map[string]interface{}

type ValuesExtraArgs map[string]interface{}

type ValuesGlobal struct {
	// Affinity corresponds to the JSON schema field "affinity".
	Affinity ValuesGlobalAffinity `json:"affinity,omitempty" yaml:"affinity,omitempty" mapstructure:"affinity,omitempty"`

	// Compatibility corresponds to the JSON schema field "compatibility".
	Compatibility *ValuesGlobalCompatibility `json:"compatibility,omitempty" yaml:"compatibility,omitempty" mapstructure:"compatibility,omitempty"`

	// NodeSelector corresponds to the JSON schema field "nodeSelector".
	NodeSelector ValuesGlobalNodeSelector `json:"nodeSelector,omitempty" yaml:"nodeSelector,omitempty" mapstructure:"nodeSelector,omitempty"`

	// Tolerations corresponds to the JSON schema field "tolerations".
	Tolerations []interface{} `json:"tolerations,omitempty" yaml:"tolerations,omitempty" mapstructure:"tolerations,omitempty"`

	// TopologySpreadConstraints corresponds to the JSON schema field
	// "topologySpreadConstraints".
	TopologySpreadConstraints []interface{} `json:"topologySpreadConstraints,omitempty" yaml:"topologySpreadConstraints,omitempty" mapstructure:"topologySpreadConstraints,omitempty"`
}

type ValuesGlobalAffinity map[string]interface{}

type ValuesGlobalCompatibility struct {
	// Openshift corresponds to the JSON schema field "openshift".
	Openshift *ValuesGlobalCompatibilityOpenshift `json:"openshift,omitempty" yaml:"openshift,omitempty" mapstructure:"openshift,omitempty"`
}

type ValuesGlobalCompatibilityOpenshift struct {
	// AdaptSecurityContext corresponds to the JSON schema field
	// "adaptSecurityContext".
	AdaptSecurityContext *string `json:"adaptSecurityContext,omitempty" yaml:"adaptSecurityContext,omitempty" mapstructure:"adaptSecurityContext,omitempty"`
}

type ValuesGlobalNodeSelector map[string]interface{}

type ValuesImage struct {
	// Flavour corresponds to the JSON schema field "flavour".
	Flavour *string `json:"flavour,omitempty" yaml:"flavour,omitempty" mapstructure:"flavour,omitempty"`

	// PullPolicy corresponds to the JSON schema field "pullPolicy".
	PullPolicy *string `json:"pullPolicy,omitempty" yaml:"pullPolicy,omitempty" mapstructure:"pullPolicy,omitempty"`

	// Repository corresponds to the JSON schema field "repository".
	Repository *string `json:"repository,omitempty" yaml:"repository,omitempty" mapstructure:"repository,omitempty"`

	// Tag corresponds to the JSON schema field "tag".
	Tag *string `json:"tag,omitempty" yaml:"tag,omitempty" mapstructure:"tag,omitempty"`
}

type ValuesLog struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty" yaml:"level,omitempty" mapstructure:"level,omitempty"`

	// TimeEncoding corresponds to the JSON schema field "timeEncoding".
	TimeEncoding *string `json:"timeEncoding,omitempty" yaml:"timeEncoding,omitempty" mapstructure:"timeEncoding,omitempty"`
}

type ValuesMetrics struct {
	// Listen corresponds to the JSON schema field "listen".
	Listen *ValuesMetricsListen `json:"listen,omitempty" yaml:"listen,omitempty" mapstructure:"listen,omitempty"`

	// Service corresponds to the JSON schema field "service".
	Service *ValuesMetricsService `json:"service,omitempty" yaml:"service,omitempty" mapstructure:"service,omitempty"`
}

type ValuesMetricsListen struct {
	// Port corresponds to the JSON schema field "port".
	Port *int `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`
}

type ValuesMetricsService struct {
	// Annotations corresponds to the JSON schema field "annotations".
	Annotations ValuesMetricsServiceAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Port corresponds to the JSON schema field "port".
	Port *int `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`
}

type ValuesMetricsServiceAnnotations map[string]interface{}

type ValuesNodeSelector map[string]interface{}

type ValuesPodAnnotations map[string]interface{}

type ValuesPodDisruptionBudget struct {
	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// MinAvailable corresponds to the JSON schema field "minAvailable".
	MinAvailable *int `json:"minAvailable,omitempty" yaml:"minAvailable,omitempty" mapstructure:"minAvailable,omitempty"`
}

type ValuesPodLabels map[string]interface{}

type ValuesPodSecurityContext struct {
	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

type ValuesPodSpecExtra map[string]interface{}

type ValuesRbac struct {
	// Create corresponds to the JSON schema field "create".
	Create *bool `json:"create,omitempty" yaml:"create,omitempty" mapstructure:"create,omitempty"`

	// Servicebindings corresponds to the JSON schema field "servicebindings".
	Servicebindings *ValuesRbacServicebindings `json:"servicebindings,omitempty" yaml:"servicebindings,omitempty" mapstructure:"servicebindings,omitempty"`
}

type ValuesRbacServicebindings struct {
	// Create corresponds to the JSON schema field "create".
	Create *bool `json:"create,omitempty" yaml:"create,omitempty" mapstructure:"create,omitempty"`
}

type ValuesResources map[string]interface{}

type ValuesSecurityContext struct {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty" yaml:"allowPrivilegeEscalation,omitempty" mapstructure:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *ValuesSecurityContextCapabilities `json:"capabilities,omitempty" yaml:"capabilities,omitempty" mapstructure:"capabilities,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty" yaml:"readOnlyRootFilesystem,omitempty" mapstructure:"readOnlyRootFilesystem,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty" yaml:"runAsNonRoot,omitempty" mapstructure:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int `json:"runAsUser,omitempty" yaml:"runAsUser,omitempty" mapstructure:"runAsUser,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *ValuesSecurityContextSeccompProfile `json:"seccompProfile,omitempty" yaml:"seccompProfile,omitempty" mapstructure:"seccompProfile,omitempty"`
}

type ValuesSecurityContextCapabilities struct {
	// Drop corresponds to the JSON schema field "drop".
	Drop []string `json:"drop,omitempty" yaml:"drop,omitempty" mapstructure:"drop,omitempty"`
}

type ValuesSecurityContextSeccompProfile struct {
	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type ValuesService struct {
	// IpFamilies corresponds to the JSON schema field "ipFamilies".
	IpFamilies []interface{} `json:"ipFamilies,omitempty" yaml:"ipFamilies,omitempty" mapstructure:"ipFamilies,omitempty"`

	// IpFamilyPolicy corresponds to the JSON schema field "ipFamilyPolicy".
	IpFamilyPolicy *string `json:"ipFamilyPolicy,omitempty" yaml:"ipFamilyPolicy,omitempty" mapstructure:"ipFamilyPolicy,omitempty"`
}

type ValuesServiceAccount struct {
	// Annotations corresponds to the JSON schema field "annotations".
	Annotations ValuesServiceAccountAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Automount corresponds to the JSON schema field "automount".
	Automount *bool `json:"automount,omitempty" yaml:"automount,omitempty" mapstructure:"automount,omitempty"`

	// Create corresponds to the JSON schema field "create".
	Create *bool `json:"create,omitempty" yaml:"create,omitempty" mapstructure:"create,omitempty"`

	// ExtraLabels corresponds to the JSON schema field "extraLabels".
	ExtraLabels ValuesServiceAccountExtraLabels `json:"extraLabels,omitempty" yaml:"extraLabels,omitempty" mapstructure:"extraLabels,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`
}

type ValuesServiceAccountAnnotations map[string]interface{}

type ValuesServiceAccountExtraLabels map[string]interface{}

type ValuesServiceMonitor struct {
	// AdditionalLabels corresponds to the JSON schema field "additionalLabels".
	AdditionalLabels ValuesServiceMonitorAdditionalLabels `json:"additionalLabels,omitempty" yaml:"additionalLabels,omitempty" mapstructure:"additionalLabels,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// HonorLabels corresponds to the JSON schema field "honorLabels".
	HonorLabels *bool `json:"honorLabels,omitempty" yaml:"honorLabels,omitempty" mapstructure:"honorLabels,omitempty"`

	// Interval corresponds to the JSON schema field "interval".
	Interval *string `json:"interval,omitempty" yaml:"interval,omitempty" mapstructure:"interval,omitempty"`

	// MetricRelabelings corresponds to the JSON schema field "metricRelabelings".
	MetricRelabelings []interface{} `json:"metricRelabelings,omitempty" yaml:"metricRelabelings,omitempty" mapstructure:"metricRelabelings,omitempty"`

	// Namespace corresponds to the JSON schema field "namespace".
	Namespace *string `json:"namespace,omitempty" yaml:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// Relabelings corresponds to the JSON schema field "relabelings".
	Relabelings []interface{} `json:"relabelings,omitempty" yaml:"relabelings,omitempty" mapstructure:"relabelings,omitempty"`

	// ScrapeTimeout corresponds to the JSON schema field "scrapeTimeout".
	ScrapeTimeout *string `json:"scrapeTimeout,omitempty" yaml:"scrapeTimeout,omitempty" mapstructure:"scrapeTimeout,omitempty"`
}

type ValuesServiceMonitorAdditionalLabels map[string]interface{}

type ValuesWebhook struct {
	// Affinity corresponds to the JSON schema field "affinity".
	Affinity ValuesWebhookAffinity `json:"affinity,omitempty" yaml:"affinity,omitempty" mapstructure:"affinity,omitempty"`

	// Annotations corresponds to the JSON schema field "annotations".
	Annotations ValuesWebhookAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// CertCheckInterval corresponds to the JSON schema field "certCheckInterval".
	CertCheckInterval *string `json:"certCheckInterval,omitempty" yaml:"certCheckInterval,omitempty" mapstructure:"certCheckInterval,omitempty"`

	// CertDir corresponds to the JSON schema field "certDir".
	CertDir *string `json:"certDir,omitempty" yaml:"certDir,omitempty" mapstructure:"certDir,omitempty"`

	// CertManager corresponds to the JSON schema field "certManager".
	CertManager *ValuesWebhookCertManager `json:"certManager,omitempty" yaml:"certManager,omitempty" mapstructure:"certManager,omitempty"`

	// Create corresponds to the JSON schema field "create".
	Create *bool `json:"create,omitempty" yaml:"create,omitempty" mapstructure:"create,omitempty"`

	// DeploymentAnnotations corresponds to the JSON schema field
	// "deploymentAnnotations".
	DeploymentAnnotations ValuesWebhookDeploymentAnnotations `json:"deploymentAnnotations,omitempty" yaml:"deploymentAnnotations,omitempty" mapstructure:"deploymentAnnotations,omitempty"`

	// ExtraArgs corresponds to the JSON schema field "extraArgs".
	ExtraArgs ValuesWebhookExtraArgs `json:"extraArgs,omitempty" yaml:"extraArgs,omitempty" mapstructure:"extraArgs,omitempty"`

	// ExtraEnv corresponds to the JSON schema field "extraEnv".
	ExtraEnv []interface{} `json:"extraEnv,omitempty" yaml:"extraEnv,omitempty" mapstructure:"extraEnv,omitempty"`

	// ExtraVolumeMounts corresponds to the JSON schema field "extraVolumeMounts".
	ExtraVolumeMounts []interface{} `json:"extraVolumeMounts,omitempty" yaml:"extraVolumeMounts,omitempty" mapstructure:"extraVolumeMounts,omitempty"`

	// ExtraVolumes corresponds to the JSON schema field "extraVolumes".
	ExtraVolumes []interface{} `json:"extraVolumes,omitempty" yaml:"extraVolumes,omitempty" mapstructure:"extraVolumes,omitempty"`

	// FailurePolicy corresponds to the JSON schema field "failurePolicy".
	FailurePolicy *string `json:"failurePolicy,omitempty" yaml:"failurePolicy,omitempty" mapstructure:"failurePolicy,omitempty"`

	// FullnameOverride corresponds to the JSON schema field "fullnameOverride".
	FullnameOverride *string `json:"fullnameOverride,omitempty" yaml:"fullnameOverride,omitempty" mapstructure:"fullnameOverride,omitempty"`

	// HostNetwork corresponds to the JSON schema field "hostNetwork".
	HostNetwork *bool `json:"hostNetwork,omitempty" yaml:"hostNetwork,omitempty" mapstructure:"hostNetwork,omitempty"`

	// Image corresponds to the JSON schema field "image".
	Image *ValuesWebhookImage `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// ImagePullSecrets corresponds to the JSON schema field "imagePullSecrets".
	ImagePullSecrets []interface{} `json:"imagePullSecrets,omitempty" yaml:"imagePullSecrets,omitempty" mapstructure:"imagePullSecrets,omitempty"`

	// Log corresponds to the JSON schema field "log".
	Log *ValuesWebhookLog `json:"log,omitempty" yaml:"log,omitempty" mapstructure:"log,omitempty"`

	// LookaheadInterval corresponds to the JSON schema field "lookaheadInterval".
	LookaheadInterval *string `json:"lookaheadInterval,omitempty" yaml:"lookaheadInterval,omitempty" mapstructure:"lookaheadInterval,omitempty"`

	// Metrics corresponds to the JSON schema field "metrics".
	Metrics *ValuesWebhookMetrics `json:"metrics,omitempty" yaml:"metrics,omitempty" mapstructure:"metrics,omitempty"`

	// NameOverride corresponds to the JSON schema field "nameOverride".
	NameOverride *string `json:"nameOverride,omitempty" yaml:"nameOverride,omitempty" mapstructure:"nameOverride,omitempty"`

	// NodeSelector corresponds to the JSON schema field "nodeSelector".
	NodeSelector ValuesWebhookNodeSelector `json:"nodeSelector,omitempty" yaml:"nodeSelector,omitempty" mapstructure:"nodeSelector,omitempty"`

	// PodAnnotations corresponds to the JSON schema field "podAnnotations".
	PodAnnotations ValuesWebhookPodAnnotations `json:"podAnnotations,omitempty" yaml:"podAnnotations,omitempty" mapstructure:"podAnnotations,omitempty"`

	// PodDisruptionBudget corresponds to the JSON schema field "podDisruptionBudget".
	PodDisruptionBudget *ValuesWebhookPodDisruptionBudget `json:"podDisruptionBudget,omitempty" yaml:"podDisruptionBudget,omitempty" mapstructure:"podDisruptionBudget,omitempty"`

	// PodLabels corresponds to the JSON schema field "podLabels".
	PodLabels ValuesWebhookPodLabels `json:"podLabels,omitempty" yaml:"podLabels,omitempty" mapstructure:"podLabels,omitempty"`

	// PodSecurityContext corresponds to the JSON schema field "podSecurityContext".
	PodSecurityContext *ValuesWebhookPodSecurityContext `json:"podSecurityContext,omitempty" yaml:"podSecurityContext,omitempty" mapstructure:"podSecurityContext,omitempty"`

	// Port corresponds to the JSON schema field "port".
	Port *int `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`

	// PriorityClassName corresponds to the JSON schema field "priorityClassName".
	PriorityClassName *string `json:"priorityClassName,omitempty" yaml:"priorityClassName,omitempty" mapstructure:"priorityClassName,omitempty"`

	// Rbac corresponds to the JSON schema field "rbac".
	Rbac *ValuesWebhookRbac `json:"rbac,omitempty" yaml:"rbac,omitempty" mapstructure:"rbac,omitempty"`

	// ReadinessProbe corresponds to the JSON schema field "readinessProbe".
	ReadinessProbe *ValuesWebhookReadinessProbe `json:"readinessProbe,omitempty" yaml:"readinessProbe,omitempty" mapstructure:"readinessProbe,omitempty"`

	// ReplicaCount corresponds to the JSON schema field "replicaCount".
	ReplicaCount *int `json:"replicaCount,omitempty" yaml:"replicaCount,omitempty" mapstructure:"replicaCount,omitempty"`

	// Resources corresponds to the JSON schema field "resources".
	Resources ValuesWebhookResources `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`

	// RevisionHistoryLimit corresponds to the JSON schema field
	// "revisionHistoryLimit".
	RevisionHistoryLimit *int `json:"revisionHistoryLimit,omitempty" yaml:"revisionHistoryLimit,omitempty" mapstructure:"revisionHistoryLimit,omitempty"`

	// SecretAnnotations corresponds to the JSON schema field "secretAnnotations".
	SecretAnnotations ValuesWebhookSecretAnnotations `json:"secretAnnotations,omitempty" yaml:"secretAnnotations,omitempty" mapstructure:"secretAnnotations,omitempty"`

	// SecurityContext corresponds to the JSON schema field "securityContext".
	SecurityContext *ValuesWebhookSecurityContext `json:"securityContext,omitempty" yaml:"securityContext,omitempty" mapstructure:"securityContext,omitempty"`

	// Service corresponds to the JSON schema field "service".
	Service *ValuesWebhookService `json:"service,omitempty" yaml:"service,omitempty" mapstructure:"service,omitempty"`

	// ServiceAccount corresponds to the JSON schema field "serviceAccount".
	ServiceAccount *ValuesWebhookServiceAccount `json:"serviceAccount,omitempty" yaml:"serviceAccount,omitempty" mapstructure:"serviceAccount,omitempty"`

	// Tolerations corresponds to the JSON schema field "tolerations".
	Tolerations []interface{} `json:"tolerations,omitempty" yaml:"tolerations,omitempty" mapstructure:"tolerations,omitempty"`

	// TopologySpreadConstraints corresponds to the JSON schema field
	// "topologySpreadConstraints".
	TopologySpreadConstraints []interface{} `json:"topologySpreadConstraints,omitempty" yaml:"topologySpreadConstraints,omitempty" mapstructure:"topologySpreadConstraints,omitempty"`
}

type ValuesWebhookAffinity map[string]interface{}

type ValuesWebhookAnnotations map[string]interface{}

type ValuesWebhookCertManager struct {
	// AddInjectorAnnotations corresponds to the JSON schema field
	// "addInjectorAnnotations".
	AddInjectorAnnotations *bool `json:"addInjectorAnnotations,omitempty" yaml:"addInjectorAnnotations,omitempty" mapstructure:"addInjectorAnnotations,omitempty"`

	// Cert corresponds to the JSON schema field "cert".
	Cert *ValuesWebhookCertManagerCert `json:"cert,omitempty" yaml:"cert,omitempty" mapstructure:"cert,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

type ValuesWebhookCertManagerCert struct {
	// Annotations corresponds to the JSON schema field "annotations".
	Annotations ValuesWebhookCertManagerCertAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Create corresponds to the JSON schema field "create".
	Create *bool `json:"create,omitempty" yaml:"create,omitempty" mapstructure:"create,omitempty"`

	// Duration corresponds to the JSON schema field "duration".
	Duration *string `json:"duration,omitempty" yaml:"duration,omitempty" mapstructure:"duration,omitempty"`

	// IssuerRef corresponds to the JSON schema field "issuerRef".
	IssuerRef *ValuesWebhookCertManagerCertIssuerRef `json:"issuerRef,omitempty" yaml:"issuerRef,omitempty" mapstructure:"issuerRef,omitempty"`

	// RenewBefore corresponds to the JSON schema field "renewBefore".
	RenewBefore *string `json:"renewBefore,omitempty" yaml:"renewBefore,omitempty" mapstructure:"renewBefore,omitempty"`

	// RevisionHistoryLimit corresponds to the JSON schema field
	// "revisionHistoryLimit".
	RevisionHistoryLimit *int `json:"revisionHistoryLimit,omitempty" yaml:"revisionHistoryLimit,omitempty" mapstructure:"revisionHistoryLimit,omitempty"`
}

type ValuesWebhookCertManagerCertAnnotations map[string]interface{}

type ValuesWebhookCertManagerCertIssuerRef struct {
	// Group corresponds to the JSON schema field "group".
	Group *string `json:"group,omitempty" yaml:"group,omitempty" mapstructure:"group,omitempty"`

	// Kind corresponds to the JSON schema field "kind".
	Kind *string `json:"kind,omitempty" yaml:"kind,omitempty" mapstructure:"kind,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`
}

type ValuesWebhookDeploymentAnnotations map[string]interface{}

type ValuesWebhookExtraArgs map[string]interface{}

type ValuesWebhookImage struct {
	// Flavour corresponds to the JSON schema field "flavour".
	Flavour *string `json:"flavour,omitempty" yaml:"flavour,omitempty" mapstructure:"flavour,omitempty"`

	// PullPolicy corresponds to the JSON schema field "pullPolicy".
	PullPolicy *string `json:"pullPolicy,omitempty" yaml:"pullPolicy,omitempty" mapstructure:"pullPolicy,omitempty"`

	// Repository corresponds to the JSON schema field "repository".
	Repository *string `json:"repository,omitempty" yaml:"repository,omitempty" mapstructure:"repository,omitempty"`

	// Tag corresponds to the JSON schema field "tag".
	Tag *string `json:"tag,omitempty" yaml:"tag,omitempty" mapstructure:"tag,omitempty"`
}

type ValuesWebhookLog struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty" yaml:"level,omitempty" mapstructure:"level,omitempty"`

	// TimeEncoding corresponds to the JSON schema field "timeEncoding".
	TimeEncoding *string `json:"timeEncoding,omitempty" yaml:"timeEncoding,omitempty" mapstructure:"timeEncoding,omitempty"`
}

type ValuesWebhookMetrics struct {
	// Listen corresponds to the JSON schema field "listen".
	Listen *ValuesWebhookMetricsListen `json:"listen,omitempty" yaml:"listen,omitempty" mapstructure:"listen,omitempty"`

	// Service corresponds to the JSON schema field "service".
	Service *ValuesWebhookMetricsService `json:"service,omitempty" yaml:"service,omitempty" mapstructure:"service,omitempty"`
}

type ValuesWebhookMetricsListen struct {
	// Port corresponds to the JSON schema field "port".
	Port *int `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`
}

type ValuesWebhookMetricsService struct {
	// Annotations corresponds to the JSON schema field "annotations".
	Annotations ValuesWebhookMetricsServiceAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Port corresponds to the JSON schema field "port".
	Port *int `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`
}

type ValuesWebhookMetricsServiceAnnotations map[string]interface{}

type ValuesWebhookNodeSelector map[string]interface{}

type ValuesWebhookPodAnnotations map[string]interface{}

type ValuesWebhookPodDisruptionBudget struct {
	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// MinAvailable corresponds to the JSON schema field "minAvailable".
	MinAvailable *int `json:"minAvailable,omitempty" yaml:"minAvailable,omitempty" mapstructure:"minAvailable,omitempty"`
}

type ValuesWebhookPodLabels map[string]interface{}

type ValuesWebhookPodSecurityContext struct {
	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

type ValuesWebhookRbac struct {
	// Create corresponds to the JSON schema field "create".
	Create *bool `json:"create,omitempty" yaml:"create,omitempty" mapstructure:"create,omitempty"`
}

type ValuesWebhookReadinessProbe struct {
	// Address corresponds to the JSON schema field "address".
	Address *string `json:"address,omitempty" yaml:"address,omitempty" mapstructure:"address,omitempty"`

	// Port corresponds to the JSON schema field "port".
	Port *int `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`
}

type ValuesWebhookResources map[string]interface{}

type ValuesWebhookSecretAnnotations map[string]interface{}

type ValuesWebhookSecurityContext struct {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty" yaml:"allowPrivilegeEscalation,omitempty" mapstructure:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *ValuesWebhookSecurityContextCapabilities `json:"capabilities,omitempty" yaml:"capabilities,omitempty" mapstructure:"capabilities,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty" yaml:"readOnlyRootFilesystem,omitempty" mapstructure:"readOnlyRootFilesystem,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty" yaml:"runAsNonRoot,omitempty" mapstructure:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int `json:"runAsUser,omitempty" yaml:"runAsUser,omitempty" mapstructure:"runAsUser,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *ValuesWebhookSecurityContextSeccompProfile `json:"seccompProfile,omitempty" yaml:"seccompProfile,omitempty" mapstructure:"seccompProfile,omitempty"`
}

type ValuesWebhookSecurityContextCapabilities struct {
	// Drop corresponds to the JSON schema field "drop".
	Drop []string `json:"drop,omitempty" yaml:"drop,omitempty" mapstructure:"drop,omitempty"`
}

type ValuesWebhookSecurityContextSeccompProfile struct {
	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type ValuesWebhookService struct {
	// Annotations corresponds to the JSON schema field "annotations".
	Annotations ValuesWebhookServiceAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Labels corresponds to the JSON schema field "labels".
	Labels ValuesWebhookServiceLabels `json:"labels,omitempty" yaml:"labels,omitempty" mapstructure:"labels,omitempty"`

	// LoadBalancerIP corresponds to the JSON schema field "loadBalancerIP".
	LoadBalancerIP *string `json:"loadBalancerIP,omitempty" yaml:"loadBalancerIP,omitempty" mapstructure:"loadBalancerIP,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type ValuesWebhookServiceAccount struct {
	// Annotations corresponds to the JSON schema field "annotations".
	Annotations ValuesWebhookServiceAccountAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Automount corresponds to the JSON schema field "automount".
	Automount *bool `json:"automount,omitempty" yaml:"automount,omitempty" mapstructure:"automount,omitempty"`

	// Create corresponds to the JSON schema field "create".
	Create *bool `json:"create,omitempty" yaml:"create,omitempty" mapstructure:"create,omitempty"`

	// ExtraLabels corresponds to the JSON schema field "extraLabels".
	ExtraLabels ValuesWebhookServiceAccountExtraLabels `json:"extraLabels,omitempty" yaml:"extraLabels,omitempty" mapstructure:"extraLabels,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`
}

type ValuesWebhookServiceAccountAnnotations map[string]interface{}

type ValuesWebhookServiceAccountExtraLabels map[string]interface{}

type ValuesWebhookServiceAnnotations map[string]interface{}

type ValuesWebhookServiceLabels map[string]interface{}
